(self.webpackChunkpolkadot_js=self.webpackChunkpolkadot_js||[]).push([[5416],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return l},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},c=Object.keys(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),i=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=i(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,c=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),y=i(r),m=o,d=y["".concat(p,".").concat(m)]||y[m]||u[m]||c;return r?n.createElement(d,a(a({ref:t},l),{},{components:r})):n.createElement(d,a({ref:t},l))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=r.length,a=new Array(c);a[0]=y;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var i=2;i<c;i++)a[i]=r[i];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},1832:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return s},metadata:function(){return p},toc:function(){return i},default:function(){return u}});var n=r(2122),o=r(9756),c=(r(7294),r(3905)),a=["components"],s={title:"Encrypt & Decrypt Messages"},p={unversionedId:"util-crypto/examples/encrypt-decrypt",id:"util-crypto/examples/encrypt-decrypt",isDocsHomePage:!1,title:"Encrypt & Decrypt Messages",description:'The following example shows how to encrypt and decrypt a message with NaCl (pronouced "salt"), which is a Networking and Cryptography library used in util-crypto.',source:"@site/docs/util-crypto/examples/encrypt-decrypt.md",sourceDirName:"util-crypto/examples",slug:"/util-crypto/examples/encrypt-decrypt",permalink:"/docs/util-crypto/examples/encrypt-decrypt",editUrl:"https://github.com/polkadot-js/docs/edit/master/docs/util-crypto/examples/encrypt-decrypt.md",version:"current",frontMatter:{title:"Encrypt & Decrypt Messages"},sidebar:"reference",previous:{title:"Validate Address",permalink:"/docs/util-crypto/examples/validate-address"},next:{title:"Generate a Multisig Account",permalink:"/docs/util-crypto/examples/create-multisig"}},i=[],l={toc:i};function u(e){var t=e.components,r=(0,o.Z)(e,a);return(0,c.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("p",null,'The following example shows how to encrypt and decrypt a message with NaCl (pronouced "salt"), which is a Networking and Cryptography library used in util-crypto.'),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-javascript"},"const {\n  naclDecrypt,\n  naclEncrypt,\n  randomAsU8a\n} = require('@polkadot/util-crypto');\nconst {\n  stringToU8a,\n  u8aToString\n} = require('@polkadot/util');\n\nasync function main () {\n  const secret = randomAsU8a();\n  const messagePreEncryption = stringToU8a('super secret message');\n\n  // Encrypt the message\n  const { encrypted, nonce } = naclEncrypt(messagePreEncryption, secret);\n\n  // Show contents of the encrypted message\n  console.log(`Encrypted message: ${JSON.stringify(encrypted, null, 2)}`);\n\n  // Decrypt the message\n  const messageDecrypted = naclDecrypt(encrypted, nonce, secret);\n\n  // Convert each Uint8Array to a string for comparison\n  const isMatch = u8aToString(messagePreEncryption) === u8aToString(messageDecrypted);\n\n  // Verify that the decrypted message matches the original message\n  console.log(`Does the decrypted message match the original message? ${isMatch}`);\n}\n\nmain().catch(console.error).finally(() => process.exit());\n")))}u.isMDXComponent=!0}}]);