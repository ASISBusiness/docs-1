(self.webpackChunkpolkadot_js=self.webpackChunkpolkadot_js||[]).push([[3166],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return d},kt:function(){return u}});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=n.createContext({}),m=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=m(e.components);return n.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=m(a),u=i,k=c["".concat(p,".").concat(u)]||c[u]||s[u]||r;return a?n.createElement(k,o(o({ref:t},d),{},{components:a})):n.createElement(k,o({ref:t},d))}));function u(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var m=2;m<r;m++)o[m]=a[m];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},7969:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return l},metadata:function(){return p},toc:function(){return m},default:function(){return s}});var n=a(2122),i=a(9756),r=(a(7294),a(3905)),o=["components"],l={title:"Extrinsics"},p={unversionedId:"substrate/extrinsics",id:"substrate/extrinsics",isDocsHomePage:!1,title:"Extrinsics",description:"The following sections contain Extrinsics methods are part of the default Substrate runtime. On the api, these are exposed via api.tx...",source:"@site/docs/substrate/extrinsics.md",sourceDirName:"substrate",slug:"/substrate/extrinsics",permalink:"/docs/substrate/extrinsics",editUrl:"https://github.com/polkadot-js/docs/edit/master/docs/substrate/extrinsics.md",version:"current",frontMatter:{title:"Extrinsics"},sidebar:"reference",previous:{title:"Storage",permalink:"/docs/substrate/storage"},next:{title:"Events",permalink:"/docs/substrate/events"}},m=[{value:"assets",id:"assets",children:[{value:"approveTransfer(id: <code>Compact&lt;AssetId&gt;</code>, delegate: <code>LookupSource</code>, amount: <code>Compact&lt;TAssetBalance&gt;</code>)",id:"approvetransferid-compactassetid-delegate-lookupsource-amount-compacttassetbalance",children:[]},{value:"burn(id: <code>Compact&lt;AssetId&gt;</code>, who: <code>LookupSource</code>, amount: <code>Compact&lt;TAssetBalance&gt;</code>)",id:"burnid-compactassetid-who-lookupsource-amount-compacttassetbalance",children:[]},{value:"cancelApproval(id: <code>Compact&lt;AssetId&gt;</code>, delegate: <code>LookupSource</code>)",id:"cancelapprovalid-compactassetid-delegate-lookupsource",children:[]},{value:"clearMetadata(id: <code>Compact&lt;AssetId&gt;</code>)",id:"clearmetadataid-compactassetid",children:[]},{value:"create(id: <code>Compact&lt;AssetId&gt;</code>, admin: <code>LookupSource</code>, min_balance: <code>TAssetBalance</code>)",id:"createid-compactassetid-admin-lookupsource-min_balance-tassetbalance",children:[]},{value:"destroy(id: <code>Compact&lt;AssetId&gt;</code>, witness: <code>AssetDestroyWitness</code>)",id:"destroyid-compactassetid-witness-assetdestroywitness",children:[]},{value:"forceAssetStatus(id: <code>Compact&lt;AssetId&gt;</code>, owner: <code>LookupSource</code>, issuer: <code>LookupSource</code>, admin: <code>LookupSource</code>, freezer: <code>LookupSource</code>, min_balance: <code>Compact&lt;TAssetBalance&gt;</code>, is_sufficient: <code>bool</code>, is_frozen: <code>bool</code>)",id:"forceassetstatusid-compactassetid-owner-lookupsource-issuer-lookupsource-admin-lookupsource-freezer-lookupsource-min_balance-compacttassetbalance-is_sufficient-bool-is_frozen-bool",children:[]},{value:"forceCancelApproval(id: <code>Compact&lt;AssetId&gt;</code>, owner: <code>LookupSource</code>, delegate: <code>LookupSource</code>)",id:"forcecancelapprovalid-compactassetid-owner-lookupsource-delegate-lookupsource",children:[]},{value:"forceClearMetadata(id: <code>Compact&lt;AssetId&gt;</code>)",id:"forceclearmetadataid-compactassetid",children:[]},{value:"forceCreate(id: <code>Compact&lt;AssetId&gt;</code>, owner: <code>LookupSource</code>, is_sufficient: <code>bool</code>, min_balance: <code>Compact&lt;TAssetBalance&gt;</code>)",id:"forcecreateid-compactassetid-owner-lookupsource-is_sufficient-bool-min_balance-compacttassetbalance",children:[]},{value:"forceSetMetadata(id: <code>Compact&lt;AssetId&gt;</code>, name: <code>Bytes</code>, symbol: <code>Bytes</code>, decimals: <code>u8</code>, is_frozen: <code>bool</code>)",id:"forcesetmetadataid-compactassetid-name-bytes-symbol-bytes-decimals-u8-is_frozen-bool",children:[]},{value:"forceTransfer(id: <code>Compact&lt;AssetId&gt;</code>, source: <code>LookupSource</code>, dest: <code>LookupSource</code>, amount: <code>Compact&lt;TAssetBalance&gt;</code>)",id:"forcetransferid-compactassetid-source-lookupsource-dest-lookupsource-amount-compacttassetbalance",children:[]},{value:"freeze(id: <code>Compact&lt;AssetId&gt;</code>, who: <code>LookupSource</code>)",id:"freezeid-compactassetid-who-lookupsource",children:[]},{value:"freezeAsset(id: <code>Compact&lt;AssetId&gt;</code>)",id:"freezeassetid-compactassetid",children:[]},{value:"mint(id: <code>Compact&lt;AssetId&gt;</code>, beneficiary: <code>LookupSource</code>, amount: <code>Compact&lt;TAssetBalance&gt;</code>)",id:"mintid-compactassetid-beneficiary-lookupsource-amount-compacttassetbalance",children:[]},{value:"setMetadata(id: <code>Compact&lt;AssetId&gt;</code>, name: <code>Bytes</code>, symbol: <code>Bytes</code>, decimals: <code>u8</code>)",id:"setmetadataid-compactassetid-name-bytes-symbol-bytes-decimals-u8",children:[]},{value:"setTeam(id: <code>Compact&lt;AssetId&gt;</code>, issuer: <code>LookupSource</code>, admin: <code>LookupSource</code>, freezer: <code>LookupSource</code>)",id:"setteamid-compactassetid-issuer-lookupsource-admin-lookupsource-freezer-lookupsource",children:[]},{value:"thaw(id: <code>Compact&lt;AssetId&gt;</code>, who: <code>LookupSource</code>)",id:"thawid-compactassetid-who-lookupsource",children:[]},{value:"thawAsset(id: <code>Compact&lt;AssetId&gt;</code>)",id:"thawassetid-compactassetid",children:[]},{value:"transfer(id: <code>Compact&lt;AssetId&gt;</code>, target: <code>LookupSource</code>, amount: <code>Compact&lt;TAssetBalance&gt;</code>)",id:"transferid-compactassetid-target-lookupsource-amount-compacttassetbalance",children:[]},{value:"transferApproved(id: <code>Compact&lt;AssetId&gt;</code>, owner: <code>LookupSource</code>, destination: <code>LookupSource</code>, amount: <code>Compact&lt;TAssetBalance&gt;</code>)",id:"transferapprovedid-compactassetid-owner-lookupsource-destination-lookupsource-amount-compacttassetbalance",children:[]},{value:"transferKeepAlive(id: <code>Compact&lt;AssetId&gt;</code>, target: <code>LookupSource</code>, amount: <code>Compact&lt;TAssetBalance&gt;</code>)",id:"transferkeepaliveid-compactassetid-target-lookupsource-amount-compacttassetbalance",children:[]},{value:"transferOwnership(id: <code>Compact&lt;AssetId&gt;</code>, owner: <code>LookupSource</code>)",id:"transferownershipid-compactassetid-owner-lookupsource",children:[]}]},{value:"authorship",id:"authorship",children:[{value:"setUncles(new_uncles: <code>Vec&lt;Header&gt;</code>)",id:"setunclesnew_uncles-vecheader",children:[]}]},{value:"babe",id:"babe",children:[{value:"planConfigChange(config: <code>NextConfigDescriptor</code>)",id:"planconfigchangeconfig-nextconfigdescriptor",children:[]},{value:"reportEquivocation(equivocation_proof: <code>BabeEquivocationProof</code>, key_owner_proof: <code>KeyOwnerProof</code>)",id:"reportequivocationequivocation_proof-babeequivocationproof-key_owner_proof-keyownerproof",children:[]},{value:"reportEquivocationUnsigned(equivocation_proof: <code>BabeEquivocationProof</code>, key_owner_proof: <code>KeyOwnerProof</code>)",id:"reportequivocationunsignedequivocation_proof-babeequivocationproof-key_owner_proof-keyownerproof",children:[]}]},{value:"balances",id:"balances",children:[{value:"forceTransfer(source: <code>LookupSource</code>, dest: <code>LookupSource</code>, value: <code>Compact&lt;Balance&gt;</code>)",id:"forcetransfersource-lookupsource-dest-lookupsource-value-compactbalance",children:[]},{value:"setBalance(who: <code>LookupSource</code>, new_free: <code>Compact&lt;Balance&gt;</code>, new_reserved: <code>Compact&lt;Balance&gt;</code>)",id:"setbalancewho-lookupsource-new_free-compactbalance-new_reserved-compactbalance",children:[]},{value:"transfer(dest: <code>LookupSource</code>, value: <code>Compact&lt;Balance&gt;</code>)",id:"transferdest-lookupsource-value-compactbalance",children:[]},{value:"transferKeepAlive(dest: <code>LookupSource</code>, value: <code>Compact&lt;Balance&gt;</code>)",id:"transferkeepalivedest-lookupsource-value-compactbalance",children:[]}]},{value:"bounties",id:"bounties",children:[{value:"acceptCurator(bounty_id: <code>Compact&lt;BountyIndex&gt;</code>)",id:"acceptcuratorbounty_id-compactbountyindex",children:[]},{value:"approveBounty(bounty_id: <code>Compact&lt;BountyIndex&gt;</code>)",id:"approvebountybounty_id-compactbountyindex",children:[]},{value:"awardBounty(bounty_id: <code>Compact&lt;BountyIndex&gt;</code>, beneficiary: <code>LookupSource</code>)",id:"awardbountybounty_id-compactbountyindex-beneficiary-lookupsource",children:[]},{value:"claimBounty(bounty_id: <code>Compact&lt;BountyIndex&gt;</code>)",id:"claimbountybounty_id-compactbountyindex",children:[]},{value:"closeBounty(bounty_id: <code>Compact&lt;BountyIndex&gt;</code>)",id:"closebountybounty_id-compactbountyindex",children:[]},{value:"extendBountyExpiry(bounty_id: <code>Compact&lt;BountyIndex&gt;</code>, _remark: <code>Bytes</code>)",id:"extendbountyexpirybounty_id-compactbountyindex-_remark-bytes",children:[]},{value:"proposeBounty(value: <code>Compact&lt;BalanceOf&gt;</code>, description: <code>Bytes</code>)",id:"proposebountyvalue-compactbalanceof-description-bytes",children:[]},{value:"proposeCurator(bounty_id: <code>Compact&lt;BountyIndex&gt;</code>, curator: <code>LookupSource</code>, fee: <code>Compact&lt;BalanceOf&gt;</code>)",id:"proposecuratorbounty_id-compactbountyindex-curator-lookupsource-fee-compactbalanceof",children:[]},{value:"unassignCurator(bounty_id: <code>Compact&lt;BountyIndex&gt;</code>)",id:"unassigncuratorbounty_id-compactbountyindex",children:[]}]},{value:"contracts",id:"contracts",children:[{value:"call(dest: <code>LookupSource</code>, value: <code>Compact&lt;BalanceOf&gt;</code>, gas_limit: <code>Compact&lt;Weight&gt;</code>, data: <code>Bytes</code>)",id:"calldest-lookupsource-value-compactbalanceof-gas_limit-compactweight-data-bytes",children:[]},{value:"claimSurcharge(dest: <code>AccountId</code>, aux_sender: <code>Option&lt;AccountId&gt;</code>)",id:"claimsurchargedest-accountid-aux_sender-optionaccountid",children:[]},{value:"instantiate(endowment: <code>Compact&lt;BalanceOf&gt;</code>, gas_limit: <code>Compact&lt;Weight&gt;</code>, code_hash: <code>CodeHash</code>, data: <code>Bytes</code>, salt: <code>Bytes</code>)",id:"instantiateendowment-compactbalanceof-gas_limit-compactweight-code_hash-codehash-data-bytes-salt-bytes",children:[]},{value:"instantiateWithCode(endowment: <code>Compact&lt;BalanceOf&gt;</code>, gas_limit: <code>Compact&lt;Weight&gt;</code>, code: <code>Bytes</code>, data: <code>Bytes</code>, salt: <code>Bytes</code>)",id:"instantiatewithcodeendowment-compactbalanceof-gas_limit-compactweight-code-bytes-data-bytes-salt-bytes",children:[]}]},{value:"council",id:"council",children:[{value:"close(proposal_hash: <code>Hash</code>, index: <code>Compact&lt;ProposalIndex&gt;</code>, proposal_weight_bound: <code>Compact&lt;Weight&gt;</code>, length_bound: <code>Compact&lt;u32&gt;</code>)",id:"closeproposal_hash-hash-index-compactproposalindex-proposal_weight_bound-compactweight-length_bound-compactu32",children:[]},{value:"disapproveProposal(proposal_hash: <code>Hash</code>)",id:"disapproveproposalproposal_hash-hash",children:[]},{value:"execute(proposal: <code>Proposal</code>, length_bound: <code>Compact&lt;u32&gt;</code>)",id:"executeproposal-proposal-length_bound-compactu32",children:[]},{value:"propose(threshold: <code>Compact&lt;MemberCount&gt;</code>, proposal: <code>Proposal</code>, length_bound: <code>Compact&lt;u32&gt;</code>)",id:"proposethreshold-compactmembercount-proposal-proposal-length_bound-compactu32",children:[]},{value:"setMembers(new_members: <code>Vec&lt;AccountId&gt;</code>, prime: <code>Option&lt;AccountId&gt;</code>, old_count: <code>MemberCount</code>)",id:"setmembersnew_members-vecaccountid-prime-optionaccountid-old_count-membercount",children:[]},{value:"vote(proposal: <code>Hash</code>, index: <code>Compact&lt;ProposalIndex&gt;</code>, approve: <code>bool</code>)",id:"voteproposal-hash-index-compactproposalindex-approve-bool",children:[]}]},{value:"democracy",id:"democracy",children:[{value:"blacklist(proposal_hash: <code>Hash</code>, maybe_ref_index: <code>Option&lt;ReferendumIndex&gt;</code>)",id:"blacklistproposal_hash-hash-maybe_ref_index-optionreferendumindex",children:[]},{value:"cancelProposal(prop_index: <code>Compact&lt;PropIndex&gt;</code>)",id:"cancelproposalprop_index-compactpropindex",children:[]},{value:"cancelQueued(which: <code>ReferendumIndex</code>)",id:"cancelqueuedwhich-referendumindex",children:[]},{value:"cancelReferendum(ref_index: <code>Compact&lt;ReferendumIndex&gt;</code>)",id:"cancelreferendumref_index-compactreferendumindex",children:[]},{value:"clearPublicProposals()",id:"clearpublicproposals",children:[]},{value:"delegate(to: <code>AccountId</code>, conviction: <code>Conviction</code>, balance: <code>BalanceOf</code>)",id:"delegateto-accountid-conviction-conviction-balance-balanceof",children:[]},{value:"emergencyCancel(ref_index: <code>ReferendumIndex</code>)",id:"emergencycancelref_index-referendumindex",children:[]},{value:"enactProposal(proposal_hash: <code>Hash</code>, index: <code>ReferendumIndex</code>)",id:"enactproposalproposal_hash-hash-index-referendumindex",children:[]},{value:"externalPropose(proposal_hash: <code>Hash</code>)",id:"externalproposeproposal_hash-hash",children:[]},{value:"externalProposeDefault(proposal_hash: <code>Hash</code>)",id:"externalproposedefaultproposal_hash-hash",children:[]},{value:"externalProposeMajority(proposal_hash: <code>Hash</code>)",id:"externalproposemajorityproposal_hash-hash",children:[]},{value:"fastTrack(proposal_hash: <code>Hash</code>, voting_period: <code>BlockNumber</code>, delay: <code>BlockNumber</code>)",id:"fasttrackproposal_hash-hash-voting_period-blocknumber-delay-blocknumber",children:[]},{value:"noteImminentPreimage(encoded_proposal: <code>Bytes</code>)",id:"noteimminentpreimageencoded_proposal-bytes",children:[]},{value:"noteImminentPreimageOperational(encoded_proposal: <code>Bytes</code>)",id:"noteimminentpreimageoperationalencoded_proposal-bytes",children:[]},{value:"notePreimage(encoded_proposal: <code>Bytes</code>)",id:"notepreimageencoded_proposal-bytes",children:[]},{value:"notePreimageOperational(encoded_proposal: <code>Bytes</code>)",id:"notepreimageoperationalencoded_proposal-bytes",children:[]},{value:"propose(proposal_hash: <code>Hash</code>, value: <code>Compact&lt;BalanceOf&gt;</code>)",id:"proposeproposal_hash-hash-value-compactbalanceof",children:[]},{value:"reapPreimage(proposal_hash: <code>Hash</code>, proposal_len_upper_bound: <code>Compact&lt;u32&gt;</code>)",id:"reappreimageproposal_hash-hash-proposal_len_upper_bound-compactu32",children:[]},{value:"removeOtherVote(target: <code>AccountId</code>, index: <code>ReferendumIndex</code>)",id:"removeothervotetarget-accountid-index-referendumindex",children:[]},{value:"removeVote(index: <code>ReferendumIndex</code>)",id:"removevoteindex-referendumindex",children:[]},{value:"second(proposal: <code>Compact&lt;PropIndex&gt;</code>, seconds_upper_bound: <code>Compact&lt;u32&gt;</code>)",id:"secondproposal-compactpropindex-seconds_upper_bound-compactu32",children:[]},{value:"undelegate()",id:"undelegate",children:[]},{value:"unlock(target: <code>AccountId</code>)",id:"unlocktarget-accountid",children:[]},{value:"vetoExternal(proposal_hash: <code>Hash</code>)",id:"vetoexternalproposal_hash-hash",children:[]},{value:"vote(ref_index: <code>Compact&lt;ReferendumIndex&gt;</code>, vote: <code>AccountVote</code>)",id:"voteref_index-compactreferendumindex-vote-accountvote",children:[]}]},{value:"electionProviderMultiPhase",id:"electionprovidermultiphase",children:[{value:"setMinimumUntrustedScore(maybe_next_score: <code>Option&lt;ElectionScore&gt;</code>)",id:"setminimumuntrustedscoremaybe_next_score-optionelectionscore",children:[]},{value:"submitUnsigned(solution: <code>RawSolution</code>, witness: <code>SolutionOrSnapshotSize</code>)",id:"submitunsignedsolution-rawsolution-witness-solutionorsnapshotsize",children:[]}]},{value:"elections",id:"elections",children:[{value:"cleanDefunctVoters(_num_voters: <code>u32</code>, _num_defunct: <code>u32</code>)",id:"cleandefunctvoters_num_voters-u32-_num_defunct-u32",children:[]},{value:"removeMember(who: <code>LookupSource</code>, has_replacement: <code>bool</code>)",id:"removememberwho-lookupsource-has_replacement-bool",children:[]},{value:"removeVoter()",id:"removevoter",children:[]},{value:"renounceCandidacy(renouncing: <code>Renouncing</code>)",id:"renouncecandidacyrenouncing-renouncing",children:[]},{value:"submitCandidacy(candidate_count: <code>Compact&lt;u32&gt;</code>)",id:"submitcandidacycandidate_count-compactu32",children:[]},{value:"vote(votes: <code>Vec&lt;AccountId&gt;</code>, value: <code>Compact&lt;BalanceOf&gt;</code>)",id:"votevotes-vecaccountid-value-compactbalanceof",children:[]}]},{value:"gilt",id:"gilt",children:[{value:"placeBid(amount: <code>Compact&lt;BalanceOf&gt;</code>, duration: <code>u32</code>)",id:"placebidamount-compactbalanceof-duration-u32",children:[]},{value:"retractBid(amount: <code>Compact&lt;BalanceOf&gt;</code>, duration: <code>u32</code>)",id:"retractbidamount-compactbalanceof-duration-u32",children:[]},{value:"setTarget(target: <code>Compact&lt;Perquintill&gt;</code>)",id:"settargettarget-compactperquintill",children:[]},{value:"thaw(index: <code>Compact&lt;ActiveIndex&gt;</code>)",id:"thawindex-compactactiveindex",children:[]}]},{value:"grandpa",id:"grandpa",children:[{value:"noteStalled(delay: <code>BlockNumber</code>, best_finalized_block_number: <code>BlockNumber</code>)",id:"notestalleddelay-blocknumber-best_finalized_block_number-blocknumber",children:[]},{value:"reportEquivocation(equivocation_proof: <code>GrandpaEquivocationProof</code>, key_owner_proof: <code>KeyOwnerProof</code>)",id:"reportequivocationequivocation_proof-grandpaequivocationproof-key_owner_proof-keyownerproof",children:[]},{value:"reportEquivocationUnsigned(equivocation_proof: <code>GrandpaEquivocationProof</code>, key_owner_proof: <code>KeyOwnerProof</code>)",id:"reportequivocationunsignedequivocation_proof-grandpaequivocationproof-key_owner_proof-keyownerproof",children:[]}]},{value:"identity",id:"identity",children:[{value:"addRegistrar(account: <code>AccountId</code>)",id:"addregistraraccount-accountid",children:[]},{value:"addSub(sub: <code>LookupSource</code>, data: <code>Data</code>)",id:"addsubsub-lookupsource-data-data",children:[]},{value:"cancelRequest(reg_index: <code>RegistrarIndex</code>)",id:"cancelrequestreg_index-registrarindex",children:[]},{value:"clearIdentity()",id:"clearidentity",children:[]},{value:"killIdentity(target: <code>LookupSource</code>)",id:"killidentitytarget-lookupsource",children:[]},{value:"provideJudgement(reg_index: <code>Compact&lt;RegistrarIndex&gt;</code>, target: <code>LookupSource</code>, judgement: <code>IdentityJudgement</code>)",id:"providejudgementreg_index-compactregistrarindex-target-lookupsource-judgement-identityjudgement",children:[]},{value:"quitSub()",id:"quitsub",children:[]},{value:"removeSub(sub: <code>LookupSource</code>)",id:"removesubsub-lookupsource",children:[]},{value:"renameSub(sub: <code>LookupSource</code>, data: <code>Data</code>)",id:"renamesubsub-lookupsource-data-data",children:[]},{value:"requestJudgement(reg_index: <code>Compact&lt;RegistrarIndex&gt;</code>, max_fee: <code>Compact&lt;BalanceOf&gt;</code>)",id:"requestjudgementreg_index-compactregistrarindex-max_fee-compactbalanceof",children:[]},{value:"setAccountId(index: <code>Compact&lt;RegistrarIndex&gt;</code>, new: <code>AccountId</code>)",id:"setaccountidindex-compactregistrarindex-new-accountid",children:[]},{value:"setFee(index: <code>Compact&lt;RegistrarIndex&gt;</code>, fee: <code>Compact&lt;BalanceOf&gt;</code>)",id:"setfeeindex-compactregistrarindex-fee-compactbalanceof",children:[]},{value:"setFields(index: <code>Compact&lt;RegistrarIndex&gt;</code>, fields: <code>IdentityFields</code>)",id:"setfieldsindex-compactregistrarindex-fields-identityfields",children:[]},{value:"setIdentity(info: <code>IdentityInfo</code>)",id:"setidentityinfo-identityinfo",children:[]},{value:"setSubs(subs: <code>Vec&lt;(AccountId,Data)&gt;</code>)",id:"setsubssubs-vecaccountiddata",children:[]}]},{value:"imOnline",id:"imonline",children:[{value:"heartbeat(heartbeat: <code>Heartbeat</code>, _signature: <code>Signature</code>)",id:"heartbeatheartbeat-heartbeat-_signature-signature",children:[]}]},{value:"indices",id:"indices",children:[{value:"claim(index: <code>AccountIndex</code>)",id:"claimindex-accountindex",children:[]},{value:"forceTransfer(new: <code>AccountId</code>, index: <code>AccountIndex</code>, freeze: <code>bool</code>)",id:"forcetransfernew-accountid-index-accountindex-freeze-bool",children:[]},{value:"free(index: <code>AccountIndex</code>)",id:"freeindex-accountindex",children:[]},{value:"freeze(index: <code>AccountIndex</code>)",id:"freezeindex-accountindex",children:[]},{value:"transfer(new: <code>AccountId</code>, index: <code>AccountIndex</code>)",id:"transfernew-accountid-index-accountindex",children:[]}]},{value:"lottery",id:"lottery",children:[{value:"buyTicket(call: <code>Call</code>)",id:"buyticketcall-call",children:[]},{value:"setCalls(calls: <code>Vec&lt;Call&gt;</code>)",id:"setcallscalls-veccall",children:[]},{value:"startLottery(price: <code>BalanceOf</code>, length: <code>BlockNumber</code>, delay: <code>BlockNumber</code>, repeat: <code>bool</code>)",id:"startlotteryprice-balanceof-length-blocknumber-delay-blocknumber-repeat-bool",children:[]},{value:"stopRepeat()",id:"stoprepeat",children:[]}]},{value:"multisig",id:"multisig",children:[{value:"approveAsMulti(threshold: <code>u16</code>, other_signatories: <code>Vec&lt;AccountId&gt;</code>, maybe_timepoint: <code>Option&lt;Timepoint&gt;</code>, call_hash: <code>[u8;32]</code>, max_weight: <code>Weight</code>)",id:"approveasmultithreshold-u16-other_signatories-vecaccountid-maybe_timepoint-optiontimepoint-call_hash-u832-max_weight-weight",children:[]},{value:"asMulti(threshold: <code>u16</code>, other_signatories: <code>Vec&lt;AccountId&gt;</code>, maybe_timepoint: <code>Option&lt;Timepoint&gt;</code>, call: <code>OpaqueCall</code>, store_call: <code>bool</code>, max_weight: <code>Weight</code>)",id:"asmultithreshold-u16-other_signatories-vecaccountid-maybe_timepoint-optiontimepoint-call-opaquecall-store_call-bool-max_weight-weight",children:[]},{value:"asMultiThreshold1(other_signatories: <code>Vec&lt;AccountId&gt;</code>, call: <code>Call</code>)",id:"asmultithreshold1other_signatories-vecaccountid-call-call",children:[]},{value:"cancelAsMulti(threshold: <code>u16</code>, other_signatories: <code>Vec&lt;AccountId&gt;</code>, timepoint: <code>Timepoint</code>, call_hash: <code>[u8;32]</code>)",id:"cancelasmultithreshold-u16-other_signatories-vecaccountid-timepoint-timepoint-call_hash-u832",children:[]}]},{value:"proxy",id:"proxy",children:[{value:"addProxy(delegate: <code>AccountId</code>, proxy_type: <code>ProxyType</code>, delay: <code>BlockNumber</code>)",id:"addproxydelegate-accountid-proxy_type-proxytype-delay-blocknumber",children:[]},{value:"announce(real: <code>AccountId</code>, call_hash: <code>CallHashOf</code>)",id:"announcereal-accountid-call_hash-callhashof",children:[]},{value:"anonymous(proxy_type: <code>ProxyType</code>, delay: <code>BlockNumber</code>, index: <code>u16</code>)",id:"anonymousproxy_type-proxytype-delay-blocknumber-index-u16",children:[]},{value:"killAnonymous(spawner: <code>AccountId</code>, proxy_type: <code>ProxyType</code>, index: <code>u16</code>, height: <code>Compact&lt;BlockNumber&gt;</code>, ext_index: <code>Compact&lt;u32&gt;</code>)",id:"killanonymousspawner-accountid-proxy_type-proxytype-index-u16-height-compactblocknumber-ext_index-compactu32",children:[]},{value:"proxy(real: <code>AccountId</code>, force_proxy_type: <code>Option&lt;ProxyType&gt;</code>, call: <code>Call</code>)",id:"proxyreal-accountid-force_proxy_type-optionproxytype-call-call",children:[]},{value:"proxyAnnounced(delegate: <code>AccountId</code>, real: <code>AccountId</code>, force_proxy_type: <code>Option&lt;ProxyType&gt;</code>, call: <code>Call</code>)",id:"proxyannounceddelegate-accountid-real-accountid-force_proxy_type-optionproxytype-call-call",children:[]},{value:"rejectAnnouncement(delegate: <code>AccountId</code>, call_hash: <code>CallHashOf</code>)",id:"rejectannouncementdelegate-accountid-call_hash-callhashof",children:[]},{value:"removeAnnouncement(real: <code>AccountId</code>, call_hash: <code>CallHashOf</code>)",id:"removeannouncementreal-accountid-call_hash-callhashof",children:[]},{value:"removeProxies()",id:"removeproxies",children:[]},{value:"removeProxy(delegate: <code>AccountId</code>, proxy_type: <code>ProxyType</code>, delay: <code>BlockNumber</code>)",id:"removeproxydelegate-accountid-proxy_type-proxytype-delay-blocknumber",children:[]}]},{value:"recovery",id:"recovery",children:[{value:"asRecovered(account: <code>AccountId</code>, call: <code>Call</code>)",id:"asrecoveredaccount-accountid-call-call",children:[]},{value:"cancelRecovered(account: <code>AccountId</code>)",id:"cancelrecoveredaccount-accountid",children:[]},{value:"claimRecovery(account: <code>AccountId</code>)",id:"claimrecoveryaccount-accountid",children:[]},{value:"closeRecovery(rescuer: <code>AccountId</code>)",id:"closerecoveryrescuer-accountid",children:[]},{value:"createRecovery(friends: <code>Vec&lt;AccountId&gt;</code>, threshold: <code>u16</code>, delay_period: <code>BlockNumber</code>)",id:"createrecoveryfriends-vecaccountid-threshold-u16-delay_period-blocknumber",children:[]},{value:"initiateRecovery(account: <code>AccountId</code>)",id:"initiaterecoveryaccount-accountid",children:[]},{value:"removeRecovery()",id:"removerecovery",children:[]},{value:"setRecovered(lost: <code>AccountId</code>, rescuer: <code>AccountId</code>)",id:"setrecoveredlost-accountid-rescuer-accountid",children:[]},{value:"vouchRecovery(lost: <code>AccountId</code>, rescuer: <code>AccountId</code>)",id:"vouchrecoverylost-accountid-rescuer-accountid",children:[]}]},{value:"scheduler",id:"scheduler",children:[{value:"cancel(when: <code>BlockNumber</code>, index: <code>u32</code>)",id:"cancelwhen-blocknumber-index-u32",children:[]},{value:"cancelNamed(id: <code>Bytes</code>)",id:"cancelnamedid-bytes",children:[]},{value:"schedule(when: <code>BlockNumber</code>, maybe_periodic: <code>Option&lt;Period&gt;</code>, priority: <code>Priority</code>, call: <code>Call</code>)",id:"schedulewhen-blocknumber-maybe_periodic-optionperiod-priority-priority-call-call",children:[]},{value:"scheduleAfter(after: <code>BlockNumber</code>, maybe_periodic: <code>Option&lt;Period&gt;</code>, priority: <code>Priority</code>, call: <code>Call</code>)",id:"scheduleafterafter-blocknumber-maybe_periodic-optionperiod-priority-priority-call-call",children:[]},{value:"scheduleNamed(id: <code>Bytes</code>, when: <code>BlockNumber</code>, maybe_periodic: <code>Option&lt;Period&gt;</code>, priority: <code>Priority</code>, call: <code>Call</code>)",id:"schedulenamedid-bytes-when-blocknumber-maybe_periodic-optionperiod-priority-priority-call-call",children:[]},{value:"scheduleNamedAfter(id: <code>Bytes</code>, after: <code>BlockNumber</code>, maybe_periodic: <code>Option&lt;Period&gt;</code>, priority: <code>Priority</code>, call: <code>Call</code>)",id:"schedulenamedafterid-bytes-after-blocknumber-maybe_periodic-optionperiod-priority-priority-call-call",children:[]}]},{value:"session",id:"session",children:[{value:"purgeKeys()",id:"purgekeys",children:[]},{value:"setKeys(keys: <code>Keys</code>, proof: <code>Bytes</code>)",id:"setkeyskeys-keys-proof-bytes",children:[]}]},{value:"society",id:"society",children:[{value:"bid(value: <code>BalanceOf</code>)",id:"bidvalue-balanceof",children:[]},{value:"defenderVote(approve: <code>bool</code>)",id:"defendervoteapprove-bool",children:[]},{value:"found(founder: <code>AccountId</code>, max_members: <code>u32</code>, rules: <code>Bytes</code>)",id:"foundfounder-accountid-max_members-u32-rules-bytes",children:[]},{value:"judgeSuspendedCandidate(who: <code>AccountId</code>, judgement: <code>SocietyJudgement</code>)",id:"judgesuspendedcandidatewho-accountid-judgement-societyjudgement",children:[]},{value:"judgeSuspendedMember(who: <code>AccountId</code>, forgive: <code>bool</code>)",id:"judgesuspendedmemberwho-accountid-forgive-bool",children:[]},{value:"payout()",id:"payout",children:[]},{value:"setMaxMembers(max: <code>u32</code>)",id:"setmaxmembersmax-u32",children:[]},{value:"unbid(pos: <code>u32</code>)",id:"unbidpos-u32",children:[]},{value:"unfound()",id:"unfound",children:[]},{value:"unvouch(pos: <code>u32</code>)",id:"unvouchpos-u32",children:[]},{value:"vote(candidate: <code>LookupSource</code>, approve: <code>bool</code>)",id:"votecandidate-lookupsource-approve-bool",children:[]},{value:"vouch(who: <code>AccountId</code>, value: <code>BalanceOf</code>, tip: <code>BalanceOf</code>)",id:"vouchwho-accountid-value-balanceof-tip-balanceof",children:[]}]},{value:"staking",id:"staking",children:[{value:"bond(controller: <code>LookupSource</code>, value: <code>Compact&lt;BalanceOf&gt;</code>, payee: <code>RewardDestination</code>)",id:"bondcontroller-lookupsource-value-compactbalanceof-payee-rewarddestination",children:[]},{value:"bondExtra(max_additional: <code>Compact&lt;BalanceOf&gt;</code>)",id:"bondextramax_additional-compactbalanceof",children:[]},{value:"cancelDeferredSlash(era: <code>EraIndex</code>, slash_indices: <code>Vec&lt;u32&gt;</code>)",id:"canceldeferredslashera-eraindex-slash_indices-vecu32",children:[]},{value:"chill()",id:"chill",children:[]},{value:"forceNewEra()",id:"forcenewera",children:[]},{value:"forceNewEraAlways()",id:"forceneweraalways",children:[]},{value:"forceNoEras()",id:"forcenoeras",children:[]},{value:"forceUnstake(stash: <code>AccountId</code>, num_slashing_spans: <code>u32</code>)",id:"forceunstakestash-accountid-num_slashing_spans-u32",children:[]},{value:"increaseValidatorCount(additional: <code>Compact&lt;u32&gt;</code>)",id:"increasevalidatorcountadditional-compactu32",children:[]},{value:"kick(who: <code>Vec&lt;LookupSource&gt;</code>)",id:"kickwho-veclookupsource",children:[]},{value:"nominate(targets: <code>Vec&lt;LookupSource&gt;</code>)",id:"nominatetargets-veclookupsource",children:[]},{value:"payoutStakers(validator_stash: <code>AccountId</code>, era: <code>EraIndex</code>)",id:"payoutstakersvalidator_stash-accountid-era-eraindex",children:[]},{value:"reapStash(stash: <code>AccountId</code>, num_slashing_spans: <code>u32</code>)",id:"reapstashstash-accountid-num_slashing_spans-u32",children:[]},{value:"rebond(value: <code>Compact&lt;BalanceOf&gt;</code>)",id:"rebondvalue-compactbalanceof",children:[]},{value:"scaleValidatorCount(factor: <code>Percent</code>)",id:"scalevalidatorcountfactor-percent",children:[]},{value:"setController(controller: <code>LookupSource</code>)",id:"setcontrollercontroller-lookupsource",children:[]},{value:"setHistoryDepth(new_history_depth: <code>Compact&lt;EraIndex&gt;</code>, _era_items_deleted: <code>Compact&lt;u32&gt;</code>)",id:"sethistorydepthnew_history_depth-compacteraindex-_era_items_deleted-compactu32",children:[]},{value:"setInvulnerables(invulnerables: <code>Vec&lt;AccountId&gt;</code>)",id:"setinvulnerablesinvulnerables-vecaccountid",children:[]},{value:"setPayee(payee: <code>RewardDestination</code>)",id:"setpayeepayee-rewarddestination",children:[]},{value:"setValidatorCount(new: <code>Compact&lt;u32&gt;</code>)",id:"setvalidatorcountnew-compactu32",children:[]},{value:"unbond(value: <code>Compact&lt;BalanceOf&gt;</code>)",id:"unbondvalue-compactbalanceof",children:[]},{value:"validate(prefs: <code>ValidatorPrefs</code>)",id:"validateprefs-validatorprefs",children:[]},{value:"withdrawUnbonded(num_slashing_spans: <code>u32</code>)",id:"withdrawunbondednum_slashing_spans-u32",children:[]}]},{value:"sudo",id:"sudo",children:[{value:"setKey(new: <code>LookupSource</code>)",id:"setkeynew-lookupsource",children:[]},{value:"sudo(call: <code>Call</code>)",id:"sudocall-call",children:[]},{value:"sudoAs(who: <code>LookupSource</code>, call: <code>Call</code>)",id:"sudoaswho-lookupsource-call-call",children:[]},{value:"sudoUncheckedWeight(call: <code>Call</code>, _weight: <code>Weight</code>)",id:"sudouncheckedweightcall-call-_weight-weight",children:[]}]},{value:"system",id:"system",children:[{value:"fillBlock(_ratio: <code>Perbill</code>)",id:"fillblock_ratio-perbill",children:[]},{value:"killPrefix(prefix: <code>Key</code>, _subkeys: <code>u32</code>)",id:"killprefixprefix-key-_subkeys-u32",children:[]},{value:"killStorage(keys: <code>Vec&lt;Key&gt;</code>)",id:"killstoragekeys-veckey",children:[]},{value:"remark(_remark: <code>Bytes</code>)",id:"remark_remark-bytes",children:[]},{value:"remarkWithEvent(remark: <code>Bytes</code>)",id:"remarkwitheventremark-bytes",children:[]},{value:"setChangesTrieConfig(changes_trie_config: <code>Option&lt;ChangesTrieConfiguration&gt;</code>)",id:"setchangestrieconfigchanges_trie_config-optionchangestrieconfiguration",children:[]},{value:"setCode(code: <code>Bytes</code>)",id:"setcodecode-bytes",children:[]},{value:"setCodeWithoutChecks(code: <code>Bytes</code>)",id:"setcodewithoutcheckscode-bytes",children:[]},{value:"setHeapPages(pages: <code>u64</code>)",id:"setheappagespages-u64",children:[]},{value:"setStorage(items: <code>Vec&lt;KeyValue&gt;</code>)",id:"setstorageitems-veckeyvalue",children:[]}]},{value:"technicalCommittee",id:"technicalcommittee",children:[{value:"close(proposal_hash: <code>Hash</code>, index: <code>Compact&lt;ProposalIndex&gt;</code>, proposal_weight_bound: <code>Compact&lt;Weight&gt;</code>, length_bound: <code>Compact&lt;u32&gt;</code>)",id:"closeproposal_hash-hash-index-compactproposalindex-proposal_weight_bound-compactweight-length_bound-compactu32-1",children:[]},{value:"disapproveProposal(proposal_hash: <code>Hash</code>)",id:"disapproveproposalproposal_hash-hash-1",children:[]},{value:"execute(proposal: <code>Proposal</code>, length_bound: <code>Compact&lt;u32&gt;</code>)",id:"executeproposal-proposal-length_bound-compactu32-1",children:[]},{value:"propose(threshold: <code>Compact&lt;MemberCount&gt;</code>, proposal: <code>Proposal</code>, length_bound: <code>Compact&lt;u32&gt;</code>)",id:"proposethreshold-compactmembercount-proposal-proposal-length_bound-compactu32-1",children:[]},{value:"setMembers(new_members: <code>Vec&lt;AccountId&gt;</code>, prime: <code>Option&lt;AccountId&gt;</code>, old_count: <code>MemberCount</code>)",id:"setmembersnew_members-vecaccountid-prime-optionaccountid-old_count-membercount-1",children:[]},{value:"vote(proposal: <code>Hash</code>, index: <code>Compact&lt;ProposalIndex&gt;</code>, approve: <code>bool</code>)",id:"voteproposal-hash-index-compactproposalindex-approve-bool-1",children:[]}]},{value:"technicalMembership",id:"technicalmembership",children:[{value:"addMember(who: <code>AccountId</code>)",id:"addmemberwho-accountid",children:[]},{value:"changeKey(new: <code>AccountId</code>)",id:"changekeynew-accountid",children:[]},{value:"clearPrime()",id:"clearprime",children:[]},{value:"removeMember(who: <code>AccountId</code>)",id:"removememberwho-accountid",children:[]},{value:"resetMembers(members: <code>Vec&lt;AccountId&gt;</code>)",id:"resetmembersmembers-vecaccountid",children:[]},{value:"setPrime(who: <code>AccountId</code>)",id:"setprimewho-accountid",children:[]},{value:"swapMember(remove: <code>AccountId</code>, add: <code>AccountId</code>)",id:"swapmemberremove-accountid-add-accountid",children:[]}]},{value:"timestamp",id:"timestamp",children:[{value:"set(now: <code>Compact&lt;Moment&gt;</code>)",id:"setnow-compactmoment",children:[]}]},{value:"tips",id:"tips",children:[{value:"closeTip(hash: <code>Hash</code>)",id:"closetiphash-hash",children:[]},{value:"reportAwesome(reason: <code>Bytes</code>, who: <code>AccountId</code>)",id:"reportawesomereason-bytes-who-accountid",children:[]},{value:"retractTip(hash: <code>Hash</code>)",id:"retracttiphash-hash",children:[]},{value:"slashTip(hash: <code>Hash</code>)",id:"slashtiphash-hash",children:[]},{value:"tip(hash: <code>Hash</code>, tip_value: <code>Compact&lt;BalanceOf&gt;</code>)",id:"tiphash-hash-tip_value-compactbalanceof",children:[]},{value:"tipNew(reason: <code>Bytes</code>, who: <code>AccountId</code>, tip_value: <code>Compact&lt;BalanceOf&gt;</code>)",id:"tipnewreason-bytes-who-accountid-tip_value-compactbalanceof",children:[]}]},{value:"treasury",id:"treasury",children:[{value:"approveProposal(proposal_id: <code>Compact&lt;ProposalIndex&gt;</code>)",id:"approveproposalproposal_id-compactproposalindex",children:[]},{value:"proposeSpend(value: <code>Compact&lt;BalanceOf&gt;</code>, beneficiary: <code>LookupSource</code>)",id:"proposespendvalue-compactbalanceof-beneficiary-lookupsource",children:[]},{value:"rejectProposal(proposal_id: <code>Compact&lt;ProposalIndex&gt;</code>)",id:"rejectproposalproposal_id-compactproposalindex",children:[]}]},{value:"utility",id:"utility",children:[{value:"asDerivative(index: <code>u16</code>, call: <code>Call</code>)",id:"asderivativeindex-u16-call-call",children:[]},{value:"batch(calls: <code>Vec&lt;Call&gt;</code>)",id:"batchcalls-veccall",children:[]},{value:"batchAll(calls: <code>Vec&lt;Call&gt;</code>)",id:"batchallcalls-veccall",children:[]}]},{value:"vesting",id:"vesting",children:[{value:"forceVestedTransfer(source: <code>LookupSource</code>, target: <code>LookupSource</code>, schedule: <code>VestingInfo</code>)",id:"forcevestedtransfersource-lookupsource-target-lookupsource-schedule-vestinginfo",children:[]},{value:"vest()",id:"vest",children:[]},{value:"vestOther(target: <code>LookupSource</code>)",id:"vestothertarget-lookupsource",children:[]},{value:"vestedTransfer(target: <code>LookupSource</code>, schedule: <code>VestingInfo</code>)",id:"vestedtransfertarget-lookupsource-schedule-vestinginfo",children:[]}]}],d={toc:m};function s(e){var t=e.components,a=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The following sections contain Extrinsics methods are part of the default Substrate runtime. On the api, these are exposed via ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.<module>.<method>"),". "),(0,r.kt)("p",null,"(NOTE: These were generated from a static/snapshot view of a recent Substrate master node. Some items may not be available in older nodes, or in any customized implementations.)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#assets"},"assets")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#authorship"},"authorship")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#babe"},"babe")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#balances"},"balances")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#bounties"},"bounties")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#contracts"},"contracts")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#council"},"council")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#democracy"},"democracy")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#electionprovidermultiphase"},"electionProviderMultiPhase")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#elections"},"elections")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#gilt"},"gilt")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#grandpa"},"grandpa")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#identity"},"identity")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#imonline"},"imOnline")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#indices"},"indices")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#lottery"},"lottery")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#multisig"},"multisig")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#proxy"},"proxy")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#recovery"},"recovery")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#scheduler"},"scheduler")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#session"},"session")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#society"},"society")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#staking"},"staking")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#sudo"},"sudo")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#system"},"system")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#technicalcommittee"},"technicalCommittee")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#technicalmembership"},"technicalMembership")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#timestamp"},"timestamp")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#tips"},"tips")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#treasury"},"treasury")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#utility"},"utility")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#vesting"},"vesting"))))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"assets"},"assets"),(0,r.kt)("h3",{id:"approvetransferid-compactassetid-delegate-lookupsource-amount-compacttassetbalance"},"approveTransfer(id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<AssetId>"),", delegate: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", amount: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<TAssetBalance>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.assets.approveTransfer"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Approve an amount of asset for transfer by a delegated third-party account. "),(0,r.kt)("p",{parentName:"li"},"Origin must be Signed. "),(0,r.kt)("p",{parentName:"li"},"Ensures that ",(0,r.kt)("inlineCode",{parentName:"p"},"ApprovalDeposit")," worth of ",(0,r.kt)("inlineCode",{parentName:"p"},"Currency")," is reserved from signing account for the purpose of holding the approval. If some non-zero amount of assets is already approved from signing account to ",(0,r.kt)("inlineCode",{parentName:"p"},"delegate"),", then it is topped up or unreserved to meet the right value. "),(0,r.kt)("p",{parentName:"li"},"NOTE: The signing account does not need to own ",(0,r.kt)("inlineCode",{parentName:"p"},"amount")," of assets at the point of making this call. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"id"),": The identifier of the asset. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"delegate"),": The account to delegate permission to transfer asset.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"amount"),": The amount of asset that may be transferred by ",(0,r.kt)("inlineCode",{parentName:"p"},"delegate"),". If there isalready an approval in place, then this acts additively. "))),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"ApprovedTransfer")," on success. "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)")," "))),(0,r.kt)("h3",{id:"burnid-compactassetid-who-lookupsource-amount-compacttassetbalance"},"burn(id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<AssetId>"),", who: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", amount: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<TAssetBalance>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.assets.burn"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Reduce the balance of ",(0,r.kt)("inlineCode",{parentName:"p"},"who")," by as much as possible up to ",(0,r.kt)("inlineCode",{parentName:"p"},"amount")," assets of ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),". "),(0,r.kt)("p",{parentName:"li"},"Origin must be Signed and the sender should be the Manager of the asset ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),". "),(0,r.kt)("p",{parentName:"li"},"Bails with ",(0,r.kt)("inlineCode",{parentName:"p"},"BalanceZero")," if the ",(0,r.kt)("inlineCode",{parentName:"p"},"who")," is already dead. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"id"),": The identifier of the asset to have some amount burned. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"who"),": The account to be debited from.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"amount"),": The maximum amount by which ",(0,r.kt)("inlineCode",{parentName:"p"},"who"),"'s balance should be reduced."))),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"Burned")," with the actual amount burned. If this takes the balance to below the minimum for the asset, then the amount burned is increased to take it to zero. "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)")," Modes: Post-existence of ",(0,r.kt)("inlineCode",{parentName:"p"},"who"),"; Pre & post Zombie-status of ",(0,r.kt)("inlineCode",{parentName:"p"},"who"),". "))),(0,r.kt)("h3",{id:"cancelapprovalid-compactassetid-delegate-lookupsource"},"cancelApproval(id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<AssetId>"),", delegate: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.assets.cancelApproval"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Cancel all of some asset approved for delegated transfer by a third-party account. "),(0,r.kt)("p",{parentName:"li"},"Origin must be Signed and there must be an approval in place between signer and ",(0,r.kt)("inlineCode",{parentName:"p"},"delegate"),". "),(0,r.kt)("p",{parentName:"li"},"Unreserves any deposit previously reserved by ",(0,r.kt)("inlineCode",{parentName:"p"},"approve_transfer")," for the approval. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"id"),": The identifier of the asset. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"delegate"),": The account delegated permission to transfer asset."))),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"ApprovalCancelled")," on success. "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)")," "))),(0,r.kt)("h3",{id:"clearmetadataid-compactassetid"},"clearMetadata(id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<AssetId>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.assets.clearMetadata"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Clear the metadata for an asset. "),(0,r.kt)("p",{parentName:"li"},"Origin must be Signed and the sender should be the Owner of the asset ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),". "),(0,r.kt)("p",{parentName:"li"},"Any deposit is freed for the asset owner. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"id"),": The identifier of the asset to clear. ")),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"MetadataCleared"),". "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)")," "))),(0,r.kt)("h3",{id:"createid-compactassetid-admin-lookupsource-min_balance-tassetbalance"},"create(id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<AssetId>"),", admin: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", min_balance: ",(0,r.kt)("inlineCode",{parentName:"h3"},"TAssetBalance"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.assets.create"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Issue a new class of fungible assets from a public origin. "),(0,r.kt)("p",{parentName:"li"},"This new asset class has no assets initially and its owner is the origin. "),(0,r.kt)("p",{parentName:"li"},"The origin must be Signed and the sender must have sufficient funds free. "),(0,r.kt)("p",{parentName:"li"},"Funds of sender are reserved by ",(0,r.kt)("inlineCode",{parentName:"p"},"AssetDeposit"),". "),(0,r.kt)("p",{parentName:"li"},"Parameters: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"id"),": The identifier of the new asset. This must not be currently in use to identifyan existing asset. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"admin"),": The admin of this class of assets. The admin is the initial address of eachmember of the asset class's admin team. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"min_balance"),": The minimum balance of this new asset that any single account musthave. If an account's balance is reduced below this, then it collapses to zero. "))),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"Created")," event when successful. "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)")," "))),(0,r.kt)("h3",{id:"destroyid-compactassetid-witness-assetdestroywitness"},"destroy(id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<AssetId>"),", witness: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AssetDestroyWitness"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.assets.destroy"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Destroy a class of fungible assets. "),(0,r.kt)("p",{parentName:"li"},"The origin must conform to ",(0,r.kt)("inlineCode",{parentName:"p"},"ForceOrigin")," or must be Signed and the sender must be the owner of the asset ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"id"),": The identifier of the asset to be destroyed. This must identify an existing asset. ")),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"Destroyed")," event when successful. "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(c + p + a)")," where: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"c = (witness.accounts - witness.sufficients)"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"s = witness.sufficients"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"a = witness.approvals")))))),(0,r.kt)("h3",{id:"forceassetstatusid-compactassetid-owner-lookupsource-issuer-lookupsource-admin-lookupsource-freezer-lookupsource-min_balance-compacttassetbalance-is_sufficient-bool-is_frozen-bool"},"forceAssetStatus(id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<AssetId>"),", owner: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", issuer: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", admin: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", freezer: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", min_balance: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<TAssetBalance>"),", is_sufficient: ",(0,r.kt)("inlineCode",{parentName:"h3"},"bool"),", is_frozen: ",(0,r.kt)("inlineCode",{parentName:"h3"},"bool"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.assets.forceAssetStatus"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Alter the attributes of a given asset. "),(0,r.kt)("p",{parentName:"li"},"Origin must be ",(0,r.kt)("inlineCode",{parentName:"p"},"ForceOrigin"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"id"),": The identifier of the asset. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"owner"),": The new Owner of this asset.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"issuer"),": The new Issuer of this asset.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"admin"),": The new Admin of this asset.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"freezer"),": The new Freezer of this asset.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"min_balance"),": The minimum balance of this new asset that any single account musthave. If an account's balance is reduced below this, then it collapses to zero. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"is_sufficient"),": Whether a non-zero balance of this asset is deposit of sufficientvalue to account for the state bloat associated with its balance storage. If set to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", then non-zero balances may be stored without a ",(0,r.kt)("inlineCode",{parentName:"p"},"consumer")," reference (and thus an ED in the Balances pallet or whatever else is used to control user-account state growth). ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"is_frozen"),": Whether this asset class is frozen except for permissioned/admininstructions. "))),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"AssetStatusChanged")," with the identity of the asset. "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)")," "))),(0,r.kt)("h3",{id:"forcecancelapprovalid-compactassetid-owner-lookupsource-delegate-lookupsource"},"forceCancelApproval(id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<AssetId>"),", owner: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", delegate: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.assets.forceCancelApproval"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Cancel all of some asset approved for delegated transfer by a third-party account. "),(0,r.kt)("p",{parentName:"li"},"Origin must be either ForceOrigin or Signed origin with the signer being the Admin account of the asset ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),". "),(0,r.kt)("p",{parentName:"li"},"Unreserves any deposit previously reserved by ",(0,r.kt)("inlineCode",{parentName:"p"},"approve_transfer")," for the approval. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"id"),": The identifier of the asset. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"delegate"),": The account delegated permission to transfer asset."))),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"ApprovalCancelled")," on success. "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)")," "))),(0,r.kt)("h3",{id:"forceclearmetadataid-compactassetid"},"forceClearMetadata(id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<AssetId>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.assets.forceClearMetadata"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Clear the metadata for an asset. "),(0,r.kt)("p",{parentName:"li"},"Origin must be ForceOrigin. "),(0,r.kt)("p",{parentName:"li"},"Any deposit is returned. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"id"),": The identifier of the asset to clear. ")),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"MetadataCleared"),". "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)")," "))),(0,r.kt)("h3",{id:"forcecreateid-compactassetid-owner-lookupsource-is_sufficient-bool-min_balance-compacttassetbalance"},"forceCreate(id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<AssetId>"),", owner: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", is_sufficient: ",(0,r.kt)("inlineCode",{parentName:"h3"},"bool"),", min_balance: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<TAssetBalance>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.assets.forceCreate"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Issue a new class of fungible assets from a privileged origin. "),(0,r.kt)("p",{parentName:"li"},"This new asset class has no assets initially. "),(0,r.kt)("p",{parentName:"li"},"The origin must conform to ",(0,r.kt)("inlineCode",{parentName:"p"},"ForceOrigin"),". "),(0,r.kt)("p",{parentName:"li"},"Unlike ",(0,r.kt)("inlineCode",{parentName:"p"},"create"),", no funds are reserved. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"id"),": The identifier of the new asset. This must not be currently in use to identify an existing asset. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"owner"),": The owner of this class of assets. The owner has full superuser permissionsover this asset, but may later change and configure the permissions using ",(0,r.kt)("inlineCode",{parentName:"p"},"transfer_ownership")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"set_team"),". ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"max_zombies"),": The total number of accounts which may hold assets in this class yethave no existential deposit. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"min_balance"),": The minimum balance of this new asset that any single account musthave. If an account's balance is reduced below this, then it collapses to zero. "))),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"ForceCreated")," event when successful. "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)")," "))),(0,r.kt)("h3",{id:"forcesetmetadataid-compactassetid-name-bytes-symbol-bytes-decimals-u8-is_frozen-bool"},"forceSetMetadata(id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<AssetId>"),", name: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Bytes"),", symbol: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Bytes"),", decimals: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u8"),", is_frozen: ",(0,r.kt)("inlineCode",{parentName:"h3"},"bool"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.assets.forceSetMetadata"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Force the metadata for an asset to some value. "),(0,r.kt)("p",{parentName:"li"},"Origin must be ForceOrigin. "),(0,r.kt)("p",{parentName:"li"},"Any deposit is left alone. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"id"),": The identifier of the asset to update. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"name"),": The user friendly name of this asset. Limited in length by ",(0,r.kt)("inlineCode",{parentName:"p"},"StringLimit"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"symbol"),": The exchange symbol for this asset. Limited in length by ",(0,r.kt)("inlineCode",{parentName:"p"},"StringLimit"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"decimals"),": The number of decimals this asset uses to represent one unit."))),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"MetadataSet"),". "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(N + S)")," where N and S are the length of the name and symbol respectively. "))),(0,r.kt)("h3",{id:"forcetransferid-compactassetid-source-lookupsource-dest-lookupsource-amount-compacttassetbalance"},"forceTransfer(id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<AssetId>"),", source: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", dest: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", amount: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<TAssetBalance>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.assets.forceTransfer"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Move some assets from one account to another. "),(0,r.kt)("p",{parentName:"li"},"Origin must be Signed and the sender should be the Admin of the asset ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"id"),": The identifier of the asset to have some amount transferred. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"source"),": The account to be debited.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"dest"),": The account to be credited.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"amount"),": The amount by which the ",(0,r.kt)("inlineCode",{parentName:"p"},"source"),"'s balance of assets should be reduced and",(0,r.kt)("inlineCode",{parentName:"p"},"dest"),"'s balance increased. The amount actually transferred may be slightly greater in the case that the transfer would otherwise take the ",(0,r.kt)("inlineCode",{parentName:"p"},"source")," balance above zero but below the minimum balance. Must be greater than zero. "))),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"Transferred")," with the actual amount transferred. If this takes the source balance to below the minimum for the asset, then the amount transferred is increased to take it to zero. "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)")," Modes: Pre-existence of ",(0,r.kt)("inlineCode",{parentName:"p"},"dest"),"; Post-existence of ",(0,r.kt)("inlineCode",{parentName:"p"},"source"),"; Prior & post zombie-status of ",(0,r.kt)("inlineCode",{parentName:"p"},"source"),"; Account pre-existence of ",(0,r.kt)("inlineCode",{parentName:"p"},"dest"),". "))),(0,r.kt)("h3",{id:"freezeid-compactassetid-who-lookupsource"},"freeze(id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<AssetId>"),", who: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.assets.freeze"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Disallow further unprivileged transfers from an account. "),(0,r.kt)("p",{parentName:"li"},"Origin must be Signed and the sender should be the Freezer of the asset ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"id"),": The identifier of the asset to be frozen. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"who"),": The account to be frozen."))),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"Frozen"),". "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)")," "))),(0,r.kt)("h3",{id:"freezeassetid-compactassetid"},"freezeAsset(id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<AssetId>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.assets.freezeAsset"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Disallow further unprivileged transfers for the asset class. "),(0,r.kt)("p",{parentName:"li"},"Origin must be Signed and the sender should be the Freezer of the asset ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"id"),": The identifier of the asset to be frozen. ")),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"Frozen"),". "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)")," "))),(0,r.kt)("h3",{id:"mintid-compactassetid-beneficiary-lookupsource-amount-compacttassetbalance"},"mint(id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<AssetId>"),", beneficiary: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", amount: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<TAssetBalance>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.assets.mint"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Mint assets of a particular class. "),(0,r.kt)("p",{parentName:"li"},"The origin must be Signed and the sender must be the Issuer of the asset ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"id"),": The identifier of the asset to have some amount minted. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"beneficiary"),": The account to be credited with the minted assets.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"amount"),": The amount of the asset to be minted."))),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"Destroyed")," event when successful. "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)")," Modes: Pre-existing balance of ",(0,r.kt)("inlineCode",{parentName:"p"},"beneficiary"),"; Account pre-existence of ",(0,r.kt)("inlineCode",{parentName:"p"},"beneficiary"),". "))),(0,r.kt)("h3",{id:"setmetadataid-compactassetid-name-bytes-symbol-bytes-decimals-u8"},"setMetadata(id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<AssetId>"),", name: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Bytes"),", symbol: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Bytes"),", decimals: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u8"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.assets.setMetadata"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Set the metadata for an asset. "),(0,r.kt)("p",{parentName:"li"},"Origin must be Signed and the sender should be the Owner of the asset ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),". "),(0,r.kt)("p",{parentName:"li"},"Funds of sender are reserved according to the formula: ",(0,r.kt)("inlineCode",{parentName:"p"},"MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)")," taking into account any already reserved funds. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"id"),": The identifier of the asset to update. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"name"),": The user friendly name of this asset. Limited in length by ",(0,r.kt)("inlineCode",{parentName:"p"},"StringLimit"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"symbol"),": The exchange symbol for this asset. Limited in length by ",(0,r.kt)("inlineCode",{parentName:"p"},"StringLimit"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"decimals"),": The number of decimals this asset uses to represent one unit."))),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"MetadataSet"),". "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)")," "))),(0,r.kt)("h3",{id:"setteamid-compactassetid-issuer-lookupsource-admin-lookupsource-freezer-lookupsource"},"setTeam(id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<AssetId>"),", issuer: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", admin: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", freezer: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.assets.setTeam"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Change the Issuer, Admin and Freezer of an asset. "),(0,r.kt)("p",{parentName:"li"},"Origin must be Signed and the sender should be the Owner of the asset ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"id"),": The identifier of the asset to be frozen. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"issuer"),": The new Issuer of this asset.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"admin"),": The new Admin of this asset.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"freezer"),": The new Freezer of this asset."))),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"TeamChanged"),". "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)")," "))),(0,r.kt)("h3",{id:"thawid-compactassetid-who-lookupsource"},"thaw(id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<AssetId>"),", who: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.assets.thaw"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Allow unprivileged transfers from an account again. "),(0,r.kt)("p",{parentName:"li"},"Origin must be Signed and the sender should be the Admin of the asset ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"id"),": The identifier of the asset to be frozen. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"who"),": The account to be unfrozen."))),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"Thawed"),". "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)")," "))),(0,r.kt)("h3",{id:"thawassetid-compactassetid"},"thawAsset(id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<AssetId>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.assets.thawAsset"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Allow unprivileged transfers for the asset again. "),(0,r.kt)("p",{parentName:"li"},"Origin must be Signed and the sender should be the Admin of the asset ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"id"),": The identifier of the asset to be frozen. ")),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"Thawed"),". "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)")," "))),(0,r.kt)("h3",{id:"transferid-compactassetid-target-lookupsource-amount-compacttassetbalance"},"transfer(id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<AssetId>"),", target: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", amount: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<TAssetBalance>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.assets.transfer"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Move some assets from the sender account to another. "),(0,r.kt)("p",{parentName:"li"},"Origin must be Signed. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"id"),": The identifier of the asset to have some amount transferred. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"target"),": The account to be credited.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"amount"),": The amount by which the sender's balance of assets should be reduced and",(0,r.kt)("inlineCode",{parentName:"p"},"target"),"'s balance increased. The amount actually transferred may be slightly greater in the case that the transfer would otherwise take the sender balance above zero but below the minimum balance. Must be greater than zero. "))),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"Transferred")," with the actual amount transferred. If this takes the source balance to below the minimum for the asset, then the amount transferred is increased to take it to zero. "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)")," Modes: Pre-existence of ",(0,r.kt)("inlineCode",{parentName:"p"},"target"),"; Post-existence of sender; Prior & post zombie-status of sender; Account pre-existence of ",(0,r.kt)("inlineCode",{parentName:"p"},"target"),". "))),(0,r.kt)("h3",{id:"transferapprovedid-compactassetid-owner-lookupsource-destination-lookupsource-amount-compacttassetbalance"},"transferApproved(id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<AssetId>"),", owner: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", destination: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", amount: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<TAssetBalance>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.assets.transferApproved"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Transfer some asset balance from a previously delegated account to some third-party account. "),(0,r.kt)("p",{parentName:"li"},"Origin must be Signed and there must be an approval in place by the ",(0,r.kt)("inlineCode",{parentName:"p"},"owner")," to the signer. "),(0,r.kt)("p",{parentName:"li"},"If the entire amount approved for transfer is transferred, then any deposit previously reserved by ",(0,r.kt)("inlineCode",{parentName:"p"},"approve_transfer")," is unreserved. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"id"),": The identifier of the asset. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"owner"),": The account which previously approved for a transfer of at least ",(0,r.kt)("inlineCode",{parentName:"p"},"amount")," andfrom which the asset balance will be withdrawn. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"destination"),": The account to which the asset balance of ",(0,r.kt)("inlineCode",{parentName:"p"},"amount")," will be transferred.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"amount"),": The amount of assets to transfer."))),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"TransferredApproved")," on success. "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)")," "))),(0,r.kt)("h3",{id:"transferkeepaliveid-compactassetid-target-lookupsource-amount-compacttassetbalance"},"transferKeepAlive(id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<AssetId>"),", target: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", amount: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<TAssetBalance>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.assets.transferKeepAlive"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Move some assets from the sender account to another, keeping the sender account alive. "),(0,r.kt)("p",{parentName:"li"},"Origin must be Signed. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"id"),": The identifier of the asset to have some amount transferred. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"target"),": The account to be credited.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"amount"),": The amount by which the sender's balance of assets should be reduced and",(0,r.kt)("inlineCode",{parentName:"p"},"target"),"'s balance increased. The amount actually transferred may be slightly greater in the case that the transfer would otherwise take the sender balance above zero but below the minimum balance. Must be greater than zero. "))),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"Transferred")," with the actual amount transferred. If this takes the source balance to below the minimum for the asset, then the amount transferred is increased to take it to zero. "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)")," Modes: Pre-existence of ",(0,r.kt)("inlineCode",{parentName:"p"},"target"),"; Post-existence of sender; Prior & post zombie-status of sender; Account pre-existence of ",(0,r.kt)("inlineCode",{parentName:"p"},"target"),". "))),(0,r.kt)("h3",{id:"transferownershipid-compactassetid-owner-lookupsource"},"transferOwnership(id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<AssetId>"),", owner: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.assets.transferOwnership"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Change the Owner of an asset. "),(0,r.kt)("p",{parentName:"li"},"Origin must be Signed and the sender should be the Owner of the asset ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"id"),": The identifier of the asset. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"owner"),": The new Owner of this asset."))),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"OwnerChanged"),". "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)")," "))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"authorship"},"authorship"),(0,r.kt)("h3",{id:"setunclesnew_uncles-vecheader"},"setUncles(new_uncles: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Vec<Header>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.tx.authorship.setUncles")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":   Provide a set of uncles. ")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"babe"},"babe"),(0,r.kt)("h3",{id:"planconfigchangeconfig-nextconfigdescriptor"},"planConfigChange(config: ",(0,r.kt)("inlineCode",{parentName:"h3"},"NextConfigDescriptor"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.tx.babe.planConfigChange")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":   Plan an epoch config change. The epoch config change is recorded and will be enacted on the next call to ",(0,r.kt)("inlineCode",{parentName:"li"},"enact_epoch_change"),". The config will be activated one epoch after. Multiple calls to this method will replace any existing planned config change that had not been enacted yet. ")),(0,r.kt)("h3",{id:"reportequivocationequivocation_proof-babeequivocationproof-key_owner_proof-keyownerproof"},"reportEquivocation(equivocation_proof: ",(0,r.kt)("inlineCode",{parentName:"h3"},"BabeEquivocationProof"),", key_owner_proof: ",(0,r.kt)("inlineCode",{parentName:"h3"},"KeyOwnerProof"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.tx.babe.reportEquivocation")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":   Report authority equivocation/misbehavior. This method will verify the equivocation proof and validate the given key ownership proof against the extracted offender. If both are valid, the offence will be reported. ")),(0,r.kt)("h3",{id:"reportequivocationunsignedequivocation_proof-babeequivocationproof-key_owner_proof-keyownerproof"},"reportEquivocationUnsigned(equivocation_proof: ",(0,r.kt)("inlineCode",{parentName:"h3"},"BabeEquivocationProof"),", key_owner_proof: ",(0,r.kt)("inlineCode",{parentName:"h3"},"KeyOwnerProof"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.tx.babe.reportEquivocationUnsigned")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":   Report authority equivocation/misbehavior. This method will verify the equivocation proof and validate the given key ownership proof against the extracted offender. If both are valid, the offence will be reported. This extrinsic must be called unsigned and it is expected that only block authors will call it (validated in ",(0,r.kt)("inlineCode",{parentName:"li"},"ValidateUnsigned"),"), as such if the block author is defined it will be defined as the equivocation reporter. ")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"balances"},"balances"),(0,r.kt)("h3",{id:"forcetransfersource-lookupsource-dest-lookupsource-value-compactbalance"},"forceTransfer(source: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", dest: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", value: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<Balance>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.tx.balances.forceTransfer")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":   Exactly as ",(0,r.kt)("inlineCode",{parentName:"li"},"transfer"),", except the origin must be root and the source account may be specified.  ")),(0,r.kt)("h3",{id:"setbalancewho-lookupsource-new_free-compactbalance-new_reserved-compactbalance"},"setBalance(who: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", new_free: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<Balance>"),", new_reserved: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<Balance>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.balances.setBalance"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Set the balances of a given account. "),(0,r.kt)("p",{parentName:"li"},"This will alter ",(0,r.kt)("inlineCode",{parentName:"p"},"FreeBalance")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ReservedBalance")," in storage. it will also decrease the total issuance of the system (",(0,r.kt)("inlineCode",{parentName:"p"},"TotalIssuance"),"). If the new free or reserved balance is below the existential deposit, it will reset the account nonce (",(0,r.kt)("inlineCode",{parentName:"p"},"frame_system::AccountNonce"),"). "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call is ",(0,r.kt)("inlineCode",{parentName:"p"},"root"),". "))),(0,r.kt)("h3",{id:"transferdest-lookupsource-value-compactbalance"},"transfer(dest: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", value: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<Balance>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.balances.transfer"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Transfer some liquid free balance to another account. "),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"transfer")," will set the ",(0,r.kt)("inlineCode",{parentName:"p"},"FreeBalance")," of the sender and receiver. It will decrease the total issuance of the system by the ",(0,r.kt)("inlineCode",{parentName:"p"},"TransferFee"),". If the sender's account is below the existential deposit as a result of the transfer, the account will be reaped. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("inlineCode",{parentName:"p"},"Signed")," by the transactor. "))),(0,r.kt)("h3",{id:"transferkeepalivedest-lookupsource-value-compactbalance"},"transferKeepAlive(dest: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", value: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<Balance>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.balances.transferKeepAlive"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Same as the ",(0,r.kt)("a",{parentName:"p",href:"struct.Pallet.html#method.transfer"},(0,r.kt)("inlineCode",{parentName:"a"},"transfer"))," call, but with a check that the transfer will not kill the origin account. "),(0,r.kt)("p",{parentName:"li"},"99% of the time you want ",(0,r.kt)("a",{parentName:"p",href:"struct.Pallet.html#method.transfer"},(0,r.kt)("inlineCode",{parentName:"a"},"transfer"))," instead. "))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"bounties"},"bounties"),(0,r.kt)("h3",{id:"acceptcuratorbounty_id-compactbountyindex"},"acceptCurator(bounty_id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<BountyIndex>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.bounties.acceptCurator"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Accept the curator role for a bounty. A deposit will be reserved from curator and refund upon successful payout. "),(0,r.kt)("p",{parentName:"li"},"May only be called from the curator. "))),(0,r.kt)("h3",{id:"approvebountybounty_id-compactbountyindex"},"approveBounty(bounty_id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<BountyIndex>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.bounties.approveBounty"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Approve a bounty proposal. At a later time, the bounty will be funded and become active and the original deposit will be returned. "),(0,r.kt)("p",{parentName:"li"},"May only be called from ",(0,r.kt)("inlineCode",{parentName:"p"},"T::ApproveOrigin"),". "))),(0,r.kt)("h3",{id:"awardbountybounty_id-compactbountyindex-beneficiary-lookupsource"},"awardBounty(bounty_id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<BountyIndex>"),", beneficiary: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.bounties.awardBounty"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Award bounty to a beneficiary account. The beneficiary will be able to claim the funds after a delay. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be the curator of this bounty. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"bounty_id"),": Bounty ID to award. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"beneficiary"),": The beneficiary account whom will receive the payout."))))),(0,r.kt)("h3",{id:"claimbountybounty_id-compactbountyindex"},"claimBounty(bounty_id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<BountyIndex>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.bounties.claimBounty"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Claim the payout from an awarded bounty after payout delay. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be the beneficiary of this bounty. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bounty_id"),": Bounty ID to claim. ")))),(0,r.kt)("h3",{id:"closebountybounty_id-compactbountyindex"},"closeBounty(bounty_id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<BountyIndex>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.bounties.closeBounty"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Cancel a proposed or active bounty. All the funds will be sent to treasury and the curator deposit will be unreserved if possible. "),(0,r.kt)("p",{parentName:"li"},"Only ",(0,r.kt)("inlineCode",{parentName:"p"},"T::RejectOrigin")," is able to cancel a bounty. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bounty_id"),": Bounty ID to cancel. ")))),(0,r.kt)("h3",{id:"extendbountyexpirybounty_id-compactbountyindex-_remark-bytes"},"extendBountyExpiry(bounty_id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<BountyIndex>"),", _remark: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Bytes"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.bounties.extendBountyExpiry"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Extend the expiry time of an active bounty. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be the curator of this bounty. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"bounty_id"),": Bounty ID to extend. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"remark"),": additional information."))))),(0,r.kt)("h3",{id:"proposebountyvalue-compactbalanceof-description-bytes"},"proposeBounty(value: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<BalanceOf>"),", description: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Bytes"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.bounties.proposeBounty"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Propose a new bounty. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". "),(0,r.kt)("p",{parentName:"li"},"Payment: ",(0,r.kt)("inlineCode",{parentName:"p"},"TipReportDepositBase")," will be reserved from the origin account, as well as ",(0,r.kt)("inlineCode",{parentName:"p"},"DataDepositPerByte")," for each byte in ",(0,r.kt)("inlineCode",{parentName:"p"},"reason"),". It will be unreserved upon approval, or slashed when rejected. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"curator"),": The curator account whom will manage this bounty. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"fee"),": The curator fee.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"value"),": The total payment amount of this bounty, curator fee included.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"description"),": The description of this bounty."))))),(0,r.kt)("h3",{id:"proposecuratorbounty_id-compactbountyindex-curator-lookupsource-fee-compactbalanceof"},"proposeCurator(bounty_id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<BountyIndex>"),", curator: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", fee: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<BalanceOf>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.bounties.proposeCurator"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Assign a curator to a funded bounty. "),(0,r.kt)("p",{parentName:"li"},"May only be called from ",(0,r.kt)("inlineCode",{parentName:"p"},"T::ApproveOrigin"),". "))),(0,r.kt)("h3",{id:"unassigncuratorbounty_id-compactbountyindex"},"unassignCurator(bounty_id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<BountyIndex>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.bounties.unassignCurator"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Unassign curator from a bounty. "),(0,r.kt)("p",{parentName:"li"},"This function can only be called by the ",(0,r.kt)("inlineCode",{parentName:"p"},"RejectOrigin")," a signed origin. "),(0,r.kt)("p",{parentName:"li"},"If this function is called by the ",(0,r.kt)("inlineCode",{parentName:"p"},"RejectOrigin"),", we assume that the curator is malicious or inactive. As a result, we will slash the curator when possible. "),(0,r.kt)("p",{parentName:"li"},"If the origin is the curator, we take this as a sign they are unable to do their job and they willingly give up. We could slash them, but for now we allow them to recover their deposit and exit without issue. (We may want to change this if it is abused.) "),(0,r.kt)("p",{parentName:"li"},'Finally, the origin can be anyone if and only if the curator is "inactive". This allows anyone in the community to call out that a curator is not doing their due diligence, and we should pick a new curator. In this case the curator should also be slashed. '))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"contracts"},"contracts"),(0,r.kt)("h3",{id:"calldest-lookupsource-value-compactbalanceof-gas_limit-compactweight-data-bytes"},"call(dest: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", value: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<BalanceOf>"),", gas_limit: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<Weight>"),", data: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Bytes"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.contracts.call"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Makes a call to an account, optionally transferring some balance. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If the account is a smart-contract account, the associated code will be executed and any value will be transferred. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If the account is a regular account, any value will be transferred.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If no account exists and the call value is not less than ",(0,r.kt)("inlineCode",{parentName:"p"},"existential_deposit"),",a regular account will be created and any value will be transferred. "))))),(0,r.kt)("h3",{id:"claimsurchargedest-accountid-aux_sender-optionaccountid"},"claimSurcharge(dest: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),", aux_sender: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Option<AccountId>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.contracts.claimSurcharge"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Allows block producers to claim a small reward for evicting a contract. If a block producer fails to do so, a regular users will be allowed to claim the reward. "),(0,r.kt)("p",{parentName:"li"},"In case of a successful eviction no fees are charged from the sender. However, the reward is capped by the total amount of rent that was paid by the contract while it was alive. "),(0,r.kt)("p",{parentName:"li"},"If contract is not evicted as a result of this call, ","[",(0,r.kt)("inlineCode",{parentName:"p"},"Error::ContractNotEvictable"),"]"," is returned and the sender is not eligible for the reward. "))),(0,r.kt)("h3",{id:"instantiateendowment-compactbalanceof-gas_limit-compactweight-code_hash-codehash-data-bytes-salt-bytes"},"instantiate(endowment: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<BalanceOf>"),", gas_limit: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<Weight>"),", code_hash: ",(0,r.kt)("inlineCode",{parentName:"h3"},"CodeHash"),", data: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Bytes"),", salt: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Bytes"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.contracts.instantiate"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Instantiates a contract from a previously deployed wasm binary. "),(0,r.kt)("p",{parentName:"li"},"This function is identical to ","[",(0,r.kt)("inlineCode",{parentName:"p"},"Self::instantiate_with_code"),"]"," but without the code deployment step. Instead, the ",(0,r.kt)("inlineCode",{parentName:"p"},"code_hash")," of an on-chain deployed wasm binary must be supplied. "))),(0,r.kt)("h3",{id:"instantiatewithcodeendowment-compactbalanceof-gas_limit-compactweight-code-bytes-data-bytes-salt-bytes"},"instantiateWithCode(endowment: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<BalanceOf>"),", gas_limit: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<Weight>"),", code: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Bytes"),", data: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Bytes"),", salt: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Bytes"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.contracts.instantiateWithCode"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Instantiates a new contract from the supplied ",(0,r.kt)("inlineCode",{parentName:"p"},"code")," optionally transferring some balance. "),(0,r.kt)("p",{parentName:"li"},"This is the only function that can deploy new code to the chain. "),(0,r.kt)("h4",{parentName:"li",id:"parameters"},"Parameters"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"endowment"),": The balance to transfer from the ",(0,r.kt)("inlineCode",{parentName:"p"},"origin")," to the newly created contract. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"gas_limit"),": The gas limit enforced when executing the constructor.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"code"),": The contract code to deploy in raw bytes.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"data"),": The input data to pass to the contract constructor.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"salt"),": Used for the address derivation. See ","[",(0,r.kt)("inlineCode",{parentName:"p"},"Pallet::contract_address"),"]","."))),(0,r.kt)("p",{parentName:"li"},"Instantiation is executed as follows: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The supplied ",(0,r.kt)("inlineCode",{parentName:"p"},"code")," is instrumented, deployed, and a ",(0,r.kt)("inlineCode",{parentName:"p"},"code_hash")," is created for that code. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"code_hash")," already exists on the chain the underlying ",(0,r.kt)("inlineCode",{parentName:"p"},"code")," will be shared.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The destination address is computed based on the sender, code_hash and the salt.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The smart-contract account is created at the computed address.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"endowment")," is transferred to the new account.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"deploy")," function is executed in the context of the newly-created account."))))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"council"},"council"),(0,r.kt)("h3",{id:"closeproposal_hash-hash-index-compactproposalindex-proposal_weight_bound-compactweight-length_bound-compactu32"},"close(proposal_hash: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Hash"),", index: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<ProposalIndex>"),", proposal_weight_bound: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<Weight>"),", length_bound: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<u32>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.council.close"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Close a vote that is either approved, disapproved or whose voting period has ended. "),(0,r.kt)("p",{parentName:"li"},"May be called by any signed account in order to finish voting and close the proposal. "),(0,r.kt)("p",{parentName:"li"},"If called before the end of the voting period it will only close the vote if it is has enough votes to be approved or disapproved. "),(0,r.kt)("p",{parentName:"li"},"If called after the end of the voting period abstentions are counted as rejections unless there is a prime member set and the prime member cast an approval. "),(0,r.kt)("p",{parentName:"li"},"If the close operation completes successfully with disapproval, the transaction fee will be waived. Otherwise execution of the approved operation will be charged to the caller. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"proposal_weight_bound"),": The maximum amount of weight consumed by executing the closed proposal. + ",(0,r.kt)("inlineCode",{parentName:"li"},"length_bound"),": The upper bound for the length of the proposal in storage. Checked via                   ",(0,r.kt)("inlineCode",{parentName:"li"},"storage::read")," so it is ",(0,r.kt)("inlineCode",{parentName:"li"},"size_of::<u32>() == 4")," larger than the pure length. ")))),(0,r.kt)("h3",{id:"disapproveproposalproposal_hash-hash"},"disapproveProposal(proposal_hash: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Hash"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.council.disapproveProposal"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Disapprove a proposal, close, and remove it from the system, regardless of its current state. "),(0,r.kt)("p",{parentName:"li"},"Must be called by the Root origin. "),(0,r.kt)("p",{parentName:"li"},"Parameters: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"proposal_hash"),": The hash of the proposal that should be disapproved.")))),(0,r.kt)("h3",{id:"executeproposal-proposal-length_bound-compactu32"},"execute(proposal: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Proposal"),", length_bound: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<u32>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.council.execute"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Dispatch a proposal from a member using the ",(0,r.kt)("inlineCode",{parentName:"p"},"Member")," origin. "),(0,r.kt)("p",{parentName:"li"},"Origin must be a member of the collective. "))),(0,r.kt)("h3",{id:"proposethreshold-compactmembercount-proposal-proposal-length_bound-compactu32"},"propose(threshold: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<MemberCount>"),", proposal: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Proposal"),", length_bound: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<u32>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.council.propose"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Add a new proposal to either be voted on or executed directly. "),(0,r.kt)("p",{parentName:"li"},"Requires the sender to be member. "),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"threshold")," determines whether ",(0,r.kt)("inlineCode",{parentName:"p"},"proposal")," is executed directly (",(0,r.kt)("inlineCode",{parentName:"p"},"threshold < 2"),") or put up for voting. "))),(0,r.kt)("h3",{id:"setmembersnew_members-vecaccountid-prime-optionaccountid-old_count-membercount"},"setMembers(new_members: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Vec<AccountId>"),", prime: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Option<AccountId>"),", old_count: ",(0,r.kt)("inlineCode",{parentName:"h3"},"MemberCount"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.council.setMembers"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Set the collective's membership. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"new_members"),": The new member list. Be nice to the chain and provide it sorted. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"prime"),": The prime member whose vote sets the default.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"old_count"),": The upper bound for the previous number of members in storage.               Used for weight estimation. "))),(0,r.kt)("p",{parentName:"li"},"Requires root origin. "),(0,r.kt)("p",{parentName:"li"},"NOTE: Does not enforce the expected ",(0,r.kt)("inlineCode",{parentName:"p"},"MaxMembers")," limit on the amount of members, but       the weight estimations rely on it to estimate dispatchable weight. "))),(0,r.kt)("h3",{id:"voteproposal-hash-index-compactproposalindex-approve-bool"},"vote(proposal: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Hash"),", index: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<ProposalIndex>"),", approve: ",(0,r.kt)("inlineCode",{parentName:"h3"},"bool"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.council.vote"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Add an aye or nay vote for the sender to the given proposal. "),(0,r.kt)("p",{parentName:"li"},"Requires the sender to be a member. "),(0,r.kt)("p",{parentName:"li"},"Transaction fees will be waived if the member is voting on any particular proposal for the first time and the call is successful. Subsequent vote changes will charge a fee.  "))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"democracy"},"democracy"),(0,r.kt)("h3",{id:"blacklistproposal_hash-hash-maybe_ref_index-optionreferendumindex"},"blacklist(proposal_hash: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Hash"),", maybe_ref_index: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Option<ReferendumIndex>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.democracy.blacklist"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Permanently place a proposal into the blacklist. This prevents it from ever being proposed again. "),(0,r.kt)("p",{parentName:"li"},"If called on a queued public or external proposal, then this will result in it being removed. If the ",(0,r.kt)("inlineCode",{parentName:"p"},"ref_index")," supplied is an active referendum with the proposal hash, then it will be cancelled. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin of this call must be ",(0,r.kt)("inlineCode",{parentName:"p"},"BlacklistOrigin"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"proposal_hash"),": The proposal hash to blacklist permanently. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"ref_index"),": An ongoing referendum whose hash is ",(0,r.kt)("inlineCode",{parentName:"p"},"proposal_hash"),", which will becancelled. "))),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(p)")," (though as this is an high-privilege dispatch, we assume it has a   reasonable value). "))),(0,r.kt)("h3",{id:"cancelproposalprop_index-compactpropindex"},"cancelProposal(prop_index: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<PropIndex>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.democracy.cancelProposal"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Remove a proposal. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin of this call must be ",(0,r.kt)("inlineCode",{parentName:"p"},"CancelProposalOrigin"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prop_index"),": The index of the proposal to cancel. ")),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(p)")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"p = PublicProps::<T>::decode_len()")," "))),(0,r.kt)("h3",{id:"cancelqueuedwhich-referendumindex"},"cancelQueued(which: ",(0,r.kt)("inlineCode",{parentName:"h3"},"ReferendumIndex"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.democracy.cancelQueued"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Cancel a proposal queued for enactment. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin of this call must be ",(0,r.kt)("em",{parentName:"p"},"Root"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"which"),": The index of the referendum to cancel. ")),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(D)")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"D")," is the items in the dispatch queue. Weighted as ",(0,r.kt)("inlineCode",{parentName:"p"},"D = 10"),". "))),(0,r.kt)("h3",{id:"cancelreferendumref_index-compactreferendumindex"},"cancelReferendum(ref_index: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<ReferendumIndex>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.democracy.cancelReferendum"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Remove a referendum. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin of this call must be ",(0,r.kt)("em",{parentName:"p"},"Root"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ref_index"),": The index of the referendum to cancel. ")),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)"),". "))),(0,r.kt)("h3",{id:"clearpublicproposals"},"clearPublicProposals()"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.democracy.clearPublicProposals"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Clears all public proposals. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin of this call must be ",(0,r.kt)("em",{parentName:"p"},"Root"),". "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)"),". "))),(0,r.kt)("h3",{id:"delegateto-accountid-conviction-conviction-balance-balanceof"},"delegate(to: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),", conviction: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Conviction"),", balance: ",(0,r.kt)("inlineCode",{parentName:"h3"},"BalanceOf"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.democracy.delegate"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Delegate the voting power (with some given conviction) of the sending account. "),(0,r.kt)("p",{parentName:"li"},"The balance delegated is locked for as long as it's delegated, and thereafter for the time appropriate for the conviction's lock period. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin of this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),", and the signing account must either: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"be delegating already; or")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"have no voting activity (if there is, then it will need to be removed/consolidated    through ",(0,r.kt)("inlineCode",{parentName:"p"},"reap_vote")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"unvote"),"). ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"to"),": The account whose voting the ",(0,r.kt)("inlineCode",{parentName:"p"},"target")," account's voting power will follow. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"conviction"),": The conviction that will be attached to the delegated votes. When the  account is undelegated, the funds will be locked for the corresponding period. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"balance"),": The amount of the account's balance to be used in delegating. This must  not be more than the account's current balance. "))),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"Delegated"),". "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(R)")," where R is the number of referendums the voter delegating to has   voted on. Weight is charged as if maximum votes. "))),(0,r.kt)("h3",{id:"emergencycancelref_index-referendumindex"},"emergencyCancel(ref_index: ",(0,r.kt)("inlineCode",{parentName:"h3"},"ReferendumIndex"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.democracy.emergencyCancel"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Schedule an emergency cancellation of a referendum. Cannot happen twice to the same referendum. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin of this call must be ",(0,r.kt)("inlineCode",{parentName:"p"},"CancellationOrigin"),". "),(0,r.kt)("p",{parentName:"li"},"-",(0,r.kt)("inlineCode",{parentName:"p"},"ref_index"),": The index of the referendum to cancel. "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)"),". "))),(0,r.kt)("h3",{id:"enactproposalproposal_hash-hash-index-referendumindex"},"enactProposal(proposal_hash: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Hash"),", index: ",(0,r.kt)("inlineCode",{parentName:"h3"},"ReferendumIndex"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.tx.democracy.enactProposal")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":   Enact a proposal from a referendum. For now we just make the weight be the maximum. ")),(0,r.kt)("h3",{id:"externalproposeproposal_hash-hash"},"externalPropose(proposal_hash: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Hash"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.democracy.externalPropose"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Schedule a referendum to be tabled once it is legal to schedule an external referendum. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin of this call must be ",(0,r.kt)("inlineCode",{parentName:"p"},"ExternalOrigin"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"proposal_hash"),": The preimage hash of the proposal. ")),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(V)")," with V number of vetoers in the blacklist of proposal.   Decoding vec of length V. Charged as maximum "))),(0,r.kt)("h3",{id:"externalproposedefaultproposal_hash-hash"},"externalProposeDefault(proposal_hash: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Hash"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.democracy.externalProposeDefault"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Schedule a negative-turnout-bias referendum to be tabled next once it is legal to schedule an external referendum. "),(0,r.kt)("p",{parentName:"li"},"The dispatch of this call must be ",(0,r.kt)("inlineCode",{parentName:"p"},"ExternalDefaultOrigin"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"proposal_hash"),": The preimage hash of the proposal. ")),(0,r.kt)("p",{parentName:"li"},"Unlike ",(0,r.kt)("inlineCode",{parentName:"p"},"external_propose"),", blacklisting has no effect on this and it may replace a pre-scheduled ",(0,r.kt)("inlineCode",{parentName:"p"},"external_propose")," call. "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)")," "))),(0,r.kt)("h3",{id:"externalproposemajorityproposal_hash-hash"},"externalProposeMajority(proposal_hash: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Hash"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.democracy.externalProposeMajority"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Schedule a majority-carries referendum to be tabled next once it is legal to schedule an external referendum. "),(0,r.kt)("p",{parentName:"li"},"The dispatch of this call must be ",(0,r.kt)("inlineCode",{parentName:"p"},"ExternalMajorityOrigin"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"proposal_hash"),": The preimage hash of the proposal. ")),(0,r.kt)("p",{parentName:"li"},"Unlike ",(0,r.kt)("inlineCode",{parentName:"p"},"external_propose"),", blacklisting has no effect on this and it may replace a pre-scheduled ",(0,r.kt)("inlineCode",{parentName:"p"},"external_propose")," call. "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)")," "))),(0,r.kt)("h3",{id:"fasttrackproposal_hash-hash-voting_period-blocknumber-delay-blocknumber"},"fastTrack(proposal_hash: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Hash"),", voting_period: ",(0,r.kt)("inlineCode",{parentName:"h3"},"BlockNumber"),", delay: ",(0,r.kt)("inlineCode",{parentName:"h3"},"BlockNumber"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.democracy.fastTrack"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Schedule the currently externally-proposed majority-carries referendum to be tabled immediately. If there is no externally-proposed referendum currently, or if there is one but it is not a majority-carries referendum then it fails. "),(0,r.kt)("p",{parentName:"li"},"The dispatch of this call must be ",(0,r.kt)("inlineCode",{parentName:"p"},"FastTrackOrigin"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"proposal_hash"),": The hash of the current external proposal. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"voting_period"),": The period that is allowed for voting on this proposal. Increased to  ",(0,r.kt)("inlineCode",{parentName:"p"},"FastTrackVotingPeriod")," if too low. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"delay"),": The number of block after voting has ended in approval and this should be  enacted. This doesn't have a minimum amount. "))),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"Started"),". "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)")," "))),(0,r.kt)("h3",{id:"noteimminentpreimageencoded_proposal-bytes"},"noteImminentPreimage(encoded_proposal: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Bytes"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.democracy.noteImminentPreimage"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Register the preimage for an upcoming proposal. This requires the proposal to be in the dispatch queue. No deposit is needed. When this call is successful, i.e. the preimage has not been uploaded before and matches some imminent proposal, no fee is paid. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin of this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"encoded_proposal"),": The preimage of a proposal. ")),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"PreimageNoted"),". "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(E)")," with E size of ",(0,r.kt)("inlineCode",{parentName:"p"},"encoded_proposal")," (protected by a required deposit). "))),(0,r.kt)("h3",{id:"noteimminentpreimageoperationalencoded_proposal-bytes"},"noteImminentPreimageOperational(encoded_proposal: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Bytes"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.tx.democracy.noteImminentPreimageOperational")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":   Same as ",(0,r.kt)("inlineCode",{parentName:"li"},"note_imminent_preimage")," but origin is ",(0,r.kt)("inlineCode",{parentName:"li"},"OperationalPreimageOrigin"),". ")),(0,r.kt)("h3",{id:"notepreimageencoded_proposal-bytes"},"notePreimage(encoded_proposal: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Bytes"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.democracy.notePreimage"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Register the preimage for an upcoming proposal. This doesn't require the proposal to be in the dispatch queue but does require a deposit, returned once enacted. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin of this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"encoded_proposal"),": The preimage of a proposal. ")),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"PreimageNoted"),". "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(E)")," with E size of ",(0,r.kt)("inlineCode",{parentName:"p"},"encoded_proposal")," (protected by a required deposit). "))),(0,r.kt)("h3",{id:"notepreimageoperationalencoded_proposal-bytes"},"notePreimageOperational(encoded_proposal: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Bytes"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.tx.democracy.notePreimageOperational")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":   Same as ",(0,r.kt)("inlineCode",{parentName:"li"},"note_preimage")," but origin is ",(0,r.kt)("inlineCode",{parentName:"li"},"OperationalPreimageOrigin"),". ")),(0,r.kt)("h3",{id:"proposeproposal_hash-hash-value-compactbalanceof"},"propose(proposal_hash: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Hash"),", value: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<BalanceOf>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.democracy.propose"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Propose a sensitive action to be taken. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin of this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," and the sender must have funds to cover the deposit. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"proposal_hash"),": The hash of the proposal preimage. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"value"),": The amount of deposit (must be at least ",(0,r.kt)("inlineCode",{parentName:"p"},"MinimumDeposit"),")."))),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"Proposed"),". "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(p)")," "))),(0,r.kt)("h3",{id:"reappreimageproposal_hash-hash-proposal_len_upper_bound-compactu32"},"reapPreimage(proposal_hash: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Hash"),", proposal_len_upper_bound: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<u32>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.democracy.reapPreimage"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Remove an expired proposal preimage and collect the deposit. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin of this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"proposal_hash"),": The preimage hash of a proposal. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"proposal_length_upper_bound"),": an upper bound on length of the proposal.  Extrinsic is weighted according to this value with no refund. "))),(0,r.kt)("p",{parentName:"li"},"This will only work after ",(0,r.kt)("inlineCode",{parentName:"p"},"VotingPeriod")," blocks from the time that the preimage was noted, if it's the same account doing it. If it's a different account, then it'll only work an additional ",(0,r.kt)("inlineCode",{parentName:"p"},"EnactmentPeriod")," later. "),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"PreimageReaped"),". "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(D)")," where D is length of proposal. "))),(0,r.kt)("h3",{id:"removeothervotetarget-accountid-index-referendumindex"},"removeOtherVote(target: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),", index: ",(0,r.kt)("inlineCode",{parentName:"h3"},"ReferendumIndex"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.democracy.removeOtherVote"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Remove a vote for a referendum. "),(0,r.kt)("p",{parentName:"li"},"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"target")," is equal to the signer, then this function is exactly equivalent to ",(0,r.kt)("inlineCode",{parentName:"p"},"remove_vote"),". If not equal to the signer, then the vote must have expired, either because the referendum was cancelled, because the voter lost the referendum or because the conviction period is over. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin of this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"target"),": The account of the vote to be removed; this account must have voted for   referendum ",(0,r.kt)("inlineCode",{parentName:"p"},"index"),". ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"index"),": The index of referendum of the vote to be removed."))),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(R + log R)")," where R is the number of referenda that ",(0,r.kt)("inlineCode",{parentName:"p"},"target")," has voted on.   Weight is calculated for the maximum number of vote. "))),(0,r.kt)("h3",{id:"removevoteindex-referendumindex"},"removeVote(index: ",(0,r.kt)("inlineCode",{parentName:"h3"},"ReferendumIndex"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.democracy.removeVote"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Remove a vote for a referendum. "),(0,r.kt)("p",{parentName:"li"},"If: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"the referendum was cancelled, or")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"the referendum is ongoing, or")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"the referendum has ended such that"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"the vote of the account was in opposition to the result; or")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"there was no conviction to the account's vote; or")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"the account made a split vote...then the vote is removed cleanly and a following call to ",(0,r.kt)("inlineCode",{parentName:"p"},"unlock")," may result in more funds being available. "))))),(0,r.kt)("p",{parentName:"li"},"If, however, the referendum has ended and: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"it finished corresponding to the vote of the account, and")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"the account made a standard vote with conviction, and")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"the lock period of the conviction is not over...then the lock will be aggregated into the overall account's lock, which may involve "))),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"overlocking")," (where the two locks are combined into a single lock that is the maximumof both the amount locked and the time is it locked for). "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin of this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),", and the signer must have a vote registered for referendum ",(0,r.kt)("inlineCode",{parentName:"p"},"index"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"index"),": The index of referendum of the vote to be removed. ")),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(R + log R)")," where R is the number of referenda that ",(0,r.kt)("inlineCode",{parentName:"p"},"target")," has voted on.   Weight is calculated for the maximum number of vote. "))),(0,r.kt)("h3",{id:"secondproposal-compactpropindex-seconds_upper_bound-compactu32"},"second(proposal: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<PropIndex>"),", seconds_upper_bound: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<u32>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.democracy.second"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Signals agreement with a particular proposal. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin of this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," and the sender must have funds to cover the deposit, equal to the original deposit. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"proposal"),": The index of the proposal to second. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"seconds_upper_bound"),": an upper bound on the current number of seconds on this  proposal. Extrinsic is weighted according to this value with no refund. "))),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(S)")," where S is the number of seconds a proposal already has. "))),(0,r.kt)("h3",{id:"undelegate"},"undelegate()"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.democracy.undelegate"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Undelegate the voting power of the sending account. "),(0,r.kt)("p",{parentName:"li"},"Tokens may be unlocked following once an amount of time consistent with the lock period of the conviction with which the delegation was issued. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin of this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," and the signing account must be currently delegating. "),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"Undelegated"),". "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(R)")," where R is the number of referendums the voter delegating to has   voted on. Weight is charged as if maximum votes. "))),(0,r.kt)("h3",{id:"unlocktarget-accountid"},"unlock(target: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.democracy.unlock"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Unlock tokens that have an expired lock. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin of this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"target"),": The account to remove the lock on. ")),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(R)")," with R number of vote of target. "))),(0,r.kt)("h3",{id:"vetoexternalproposal_hash-hash"},"vetoExternal(proposal_hash: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Hash"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.democracy.vetoExternal"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Veto and blacklist the external proposal hash. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin of this call must be ",(0,r.kt)("inlineCode",{parentName:"p"},"VetoOrigin"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"proposal_hash"),": The preimage hash of the proposal to veto and blacklist. ")),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"Vetoed"),". "),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(V + log(V))")," where V is number of ",(0,r.kt)("inlineCode",{parentName:"p"},"existing vetoers")," "))),(0,r.kt)("h3",{id:"voteref_index-compactreferendumindex-vote-accountvote"},"vote(ref_index: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<ReferendumIndex>"),", vote: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountVote"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.democracy.vote"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Vote in a referendum. If ",(0,r.kt)("inlineCode",{parentName:"p"},"vote.is_aye()"),", the vote is to enact the proposal; otherwise it is a vote to keep the status quo. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin of this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"ref_index"),": The index of the referendum to vote for. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"vote"),": The vote configuration."))),(0,r.kt)("p",{parentName:"li"},"Weight: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(R)")," where R is the number of referendums the voter has voted on. "))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"electionprovidermultiphase"},"electionProviderMultiPhase"),(0,r.kt)("h3",{id:"setminimumuntrustedscoremaybe_next_score-optionelectionscore"},"setMinimumUntrustedScore(maybe_next_score: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Option<ElectionScore>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.electionProviderMultiPhase.setMinimumUntrustedScore"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Set a new value for ",(0,r.kt)("inlineCode",{parentName:"p"},"MinimumUntrustedScore"),". "),(0,r.kt)("p",{parentName:"li"},"Dispatch origin must be aligned with ",(0,r.kt)("inlineCode",{parentName:"p"},"T::ForceOrigin"),". "),(0,r.kt)("p",{parentName:"li"},"This check can be turned off by setting the value to ",(0,r.kt)("inlineCode",{parentName:"p"},"None"),". "))),(0,r.kt)("h3",{id:"submitunsignedsolution-rawsolution-witness-solutionorsnapshotsize"},"submitUnsigned(solution: ",(0,r.kt)("inlineCode",{parentName:"h3"},"RawSolution"),", witness: ",(0,r.kt)("inlineCode",{parentName:"h3"},"SolutionOrSnapshotSize"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.electionProviderMultiPhase.submitUnsigned"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Submit a solution for the unsigned phase. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin fo this call must be ",(0,r.kt)("strong",{parentName:"p"},"none"),". "),(0,r.kt)("p",{parentName:"li"},"This submission is checked on the fly. Moreover, this unsigned solution is only validated when submitted to the pool from the ",(0,r.kt)("strong",{parentName:"p"},"local")," node. Effectively, this means that only active validators can submit this transaction when authoring a block (similar to an inherent). "),(0,r.kt)("p",{parentName:"li"},"To prevent any incorrect solution (and thus wasted time/weight), this transaction will panic if the solution submitted by the validator is invalid in any way, effectively putting their authoring reward at risk. "),(0,r.kt)("p",{parentName:"li"},"No deposit or reward is associated with this submission. "))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"elections"},"elections"),(0,r.kt)("h3",{id:"cleandefunctvoters_num_voters-u32-_num_defunct-u32"},"cleanDefunctVoters(_num_voters: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32"),", _num_defunct: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.elections.cleanDefunctVoters"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Clean all voters who are defunct (i.e. they do not serve any purpose at all). The deposit of the removed voters are returned. "),(0,r.kt)("p",{parentName:"li"},"This is an root function to be used only for cleaning the state. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin of this call must be root. "))),(0,r.kt)("h3",{id:"removememberwho-lookupsource-has_replacement-bool"},"removeMember(who: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", has_replacement: ",(0,r.kt)("inlineCode",{parentName:"h3"},"bool"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.elections.removeMember"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Remove a particular member from the set. This is effective immediately and the bond of the outgoing member is slashed. "),(0,r.kt)("p",{parentName:"li"},"If a runner-up is available, then the best runner-up will be removed and replaces the outgoing member. Otherwise, a new phragmen election is started. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin of this call must be root. "),(0,r.kt)("p",{parentName:"li"},"Note that this does not affect the designated block number of the next election. "))),(0,r.kt)("h3",{id:"removevoter"},"removeVoter()"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.elections.removeVoter"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Remove ",(0,r.kt)("inlineCode",{parentName:"p"},"origin")," as a voter. "),(0,r.kt)("p",{parentName:"li"},"This removes the lock and returns the deposit. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin of this call must be signed and be a voter. "))),(0,r.kt)("h3",{id:"renouncecandidacyrenouncing-renouncing"},"renounceCandidacy(renouncing: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Renouncing"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.elections.renounceCandidacy"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Renounce one's intention to be a candidate for the next election round. 3 potential outcomes exist: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"origin")," is a candidate and not elected in any set. In this case, the deposit is   unreserved, returned and origin is removed as a candidate. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"origin")," is a current runner-up. In this case, the deposit is unreserved, returned and  origin is removed as a runner-up. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"origin")," is a current member. In this case, the deposit is unreserved and origin is  removed as a member, consequently not being a candidate for the next round anymore.   Similar to ","[",(0,r.kt)("inlineCode",{parentName:"p"},"remove_members"),"]",", if replacement runners exists, they are immediately   used. If the prime is renouncing, then no prime will exist until the next round. "))),(0,r.kt)("p",{parentName:"li"},"The dispatch origin of this call must be signed, and have one of the above roles. "))),(0,r.kt)("h3",{id:"submitcandidacycandidate_count-compactu32"},"submitCandidacy(candidate_count: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<u32>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.elections.submitCandidacy"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Submit oneself for candidacy. A fixed amount of deposit is recorded. "),(0,r.kt)("p",{parentName:"li"},"All candidates are wiped at the end of the term. They either become a member/runner-up, or leave the system while their deposit is slashed. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin of this call must be signed. "),(0,r.kt)("h4",{parentName:"li",id:"warning"},"Warning"),(0,r.kt)("p",{parentName:"li"},"Even if a candidate ends up being a member, they must call ","[",(0,r.kt)("inlineCode",{parentName:"p"},"Call::renounce_candidacy"),"]"," to get their deposit back. Losing the spot in an election will always lead to a slash. "))),(0,r.kt)("h3",{id:"votevotes-vecaccountid-value-compactbalanceof"},"vote(votes: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Vec<AccountId>"),", value: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<BalanceOf>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.elections.vote"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Vote for a set of candidates for the upcoming round of election. This can be called to set the initial votes, or update already existing votes. "),(0,r.kt)("p",{parentName:"li"},"Upon initial voting, ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," units of ",(0,r.kt)("inlineCode",{parentName:"p"},"who"),"'s balance is locked and a deposit amount is reserved. The deposit is based on the number of votes and can be updated over time. "),(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"votes")," should: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"not be empty.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"be less than the number of possible candidates. Note that all current members and    runners-up are also automatically candidates for the next round. "))),(0,r.kt)("p",{parentName:"li"},"If ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," is more than ",(0,r.kt)("inlineCode",{parentName:"p"},"who"),"'s total balance, then the maximum of the two is used. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin of this call must be signed. "),(0,r.kt)("h4",{parentName:"li",id:"warning-1"},"Warning"),(0,r.kt)("p",{parentName:"li"},"It is the responsibility of the caller to ",(0,r.kt)("strong",{parentName:"p"},"NOT")," place all of their balance into the lock and keep some for further operations. "))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"gilt"},"gilt"),(0,r.kt)("h3",{id:"placebidamount-compactbalanceof-duration-u32"},"placeBid(amount: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<BalanceOf>"),", duration: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.gilt.placeBid"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Place a bid for a gilt to be issued. "),(0,r.kt)("p",{parentName:"li"},"Origin must be Signed, and account must have at least ",(0,r.kt)("inlineCode",{parentName:"p"},"amount")," in free balance. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"amount"),": The amount of the bid; these funds will be reserved. If the bid is successfully elevated into an issued gilt, then these funds will continue to be reserved until the gilt expires. Must be at least ",(0,r.kt)("inlineCode",{parentName:"p"},"MinFreeze"),". ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"duration"),": The number of periods for which the funds will be locked if the gilt isissued. It will expire only after this period has elapsed after the point of issuance. Must be greater than 1 and no more than ",(0,r.kt)("inlineCode",{parentName:"p"},"QueueCount"),". "))),(0,r.kt)("p",{parentName:"li"},"Complexities: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Queues[duration].len()")," (just take max).")))),(0,r.kt)("h3",{id:"retractbidamount-compactbalanceof-duration-u32"},"retractBid(amount: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<BalanceOf>"),", duration: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.gilt.retractBid"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Retract a previously placed bid. "),(0,r.kt)("p",{parentName:"li"},"Origin must be Signed, and the account should have previously issued a still-active bid of ",(0,r.kt)("inlineCode",{parentName:"p"},"amount")," for ",(0,r.kt)("inlineCode",{parentName:"p"},"duration"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"amount"),": The amount of the previous bid. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"duration"),": The duration of the previous bid."))))),(0,r.kt)("h3",{id:"settargettarget-compactperquintill"},"setTarget(target: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<Perquintill>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.gilt.setTarget"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Set target proportion of gilt-funds. "),(0,r.kt)("p",{parentName:"li"},"Origin must be ",(0,r.kt)("inlineCode",{parentName:"p"},"AdminOrigin"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"target"),": The target proportion of effective issued funds that should be under gilts at any one time. ")))),(0,r.kt)("h3",{id:"thawindex-compactactiveindex"},"thaw(index: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<ActiveIndex>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.gilt.thaw"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Remove an active but expired gilt. Reserved funds under gilt are freed and balance is adjusted to ensure that the funds grow or shrink to maintain the equivalent proportion of effective total issued funds. "),(0,r.kt)("p",{parentName:"li"},"Origin must be Signed and the account must be the owner of the gilt of the given index. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"index"),": The index of the gilt to be thawed. ")))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"grandpa"},"grandpa"),(0,r.kt)("h3",{id:"notestalleddelay-blocknumber-best_finalized_block_number-blocknumber"},"noteStalled(delay: ",(0,r.kt)("inlineCode",{parentName:"h3"},"BlockNumber"),", best_finalized_block_number: ",(0,r.kt)("inlineCode",{parentName:"h3"},"BlockNumber"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.tx.grandpa.noteStalled")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":   Note that the current authority set of the GRANDPA finality gadget has stalled. This will trigger a forced authority set change at the beginning of the next session, to be enacted ",(0,r.kt)("inlineCode",{parentName:"li"},"delay")," blocks after that. The delay should be high enough to safely assume that the block signalling the forced change will not be re-orged (e.g. 1000 blocks). The GRANDPA voters will start the new authority set using the given finalized block as base. Only callable by root. ")),(0,r.kt)("h3",{id:"reportequivocationequivocation_proof-grandpaequivocationproof-key_owner_proof-keyownerproof"},"reportEquivocation(equivocation_proof: ",(0,r.kt)("inlineCode",{parentName:"h3"},"GrandpaEquivocationProof"),", key_owner_proof: ",(0,r.kt)("inlineCode",{parentName:"h3"},"KeyOwnerProof"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.tx.grandpa.reportEquivocation")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":   Report voter equivocation/misbehavior. This method will verify the equivocation proof and validate the given key ownership proof against the extracted offender. If both are valid, the offence will be reported. ")),(0,r.kt)("h3",{id:"reportequivocationunsignedequivocation_proof-grandpaequivocationproof-key_owner_proof-keyownerproof"},"reportEquivocationUnsigned(equivocation_proof: ",(0,r.kt)("inlineCode",{parentName:"h3"},"GrandpaEquivocationProof"),", key_owner_proof: ",(0,r.kt)("inlineCode",{parentName:"h3"},"KeyOwnerProof"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.grandpa.reportEquivocationUnsigned"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Report voter equivocation/misbehavior. This method will verify the equivocation proof and validate the given key ownership proof against the extracted offender. If both are valid, the offence will be reported. "),(0,r.kt)("p",{parentName:"li"},"This extrinsic must be called unsigned and it is expected that only block authors will call it (validated in ",(0,r.kt)("inlineCode",{parentName:"p"},"ValidateUnsigned"),"), as such if the block author is defined it will be defined as the equivocation reporter. "))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"identity"},"identity"),(0,r.kt)("h3",{id:"addregistraraccount-accountid"},"addRegistrar(account: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.identity.addRegistrar"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Add a registrar to the system. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("inlineCode",{parentName:"p"},"T::RegistrarOrigin"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"account"),": the account of the registrar. ")),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"RegistrarAdded")," if successful. "))),(0,r.kt)("h3",{id:"addsubsub-lookupsource-data-data"},"addSub(sub: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", data: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Data"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.identity.addSub"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Add the given account to the sender's subs. "),(0,r.kt)("p",{parentName:"li"},"Payment: Balance reserved by a previous ",(0,r.kt)("inlineCode",{parentName:"p"},"set_subs")," call for one sub will be repatriated to the sender. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," and the sender must have a registered sub identity of ",(0,r.kt)("inlineCode",{parentName:"p"},"sub"),". "))),(0,r.kt)("h3",{id:"cancelrequestreg_index-registrarindex"},"cancelRequest(reg_index: ",(0,r.kt)("inlineCode",{parentName:"h3"},"RegistrarIndex"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.identity.cancelRequest"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Cancel a previous request. "),(0,r.kt)("p",{parentName:"li"},"Payment: A previously reserved deposit is returned on success. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," and the sender must have a registered identity. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"reg_index"),": The index of the registrar whose judgement is no longer requested. ")),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"JudgementUnrequested")," if successful. "))),(0,r.kt)("h3",{id:"clearidentity"},"clearIdentity()"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.identity.clearIdentity"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Clear an account's identity info and all sub-accounts and return all deposits. "),(0,r.kt)("p",{parentName:"li"},"Payment: All reserved balances on the account are returned. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," and the sender must have a registered identity. "),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"IdentityCleared")," if successful. "))),(0,r.kt)("h3",{id:"killidentitytarget-lookupsource"},"killIdentity(target: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.identity.killIdentity"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Remove an account's identity and sub-account information and slash the deposits. "),(0,r.kt)("p",{parentName:"li"},"Payment: Reserved balances from ",(0,r.kt)("inlineCode",{parentName:"p"},"set_subs")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"set_identity")," are slashed and handled by ",(0,r.kt)("inlineCode",{parentName:"p"},"Slash"),". Verification request deposits are not returned; they should be cancelled manually using ",(0,r.kt)("inlineCode",{parentName:"p"},"cancel_request"),". "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must match ",(0,r.kt)("inlineCode",{parentName:"p"},"T::ForceOrigin"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"target"),": the account whose identity the judgement is upon. This must be an account   with a registered identity. ")),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"IdentityKilled")," if successful. "))),(0,r.kt)("h3",{id:"providejudgementreg_index-compactregistrarindex-target-lookupsource-judgement-identityjudgement"},"provideJudgement(reg_index: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<RegistrarIndex>"),", target: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", judgement: ",(0,r.kt)("inlineCode",{parentName:"h3"},"IdentityJudgement"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.identity.provideJudgement"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Provide a judgement for an account's identity. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," and the sender must be the account of the registrar whose index is ",(0,r.kt)("inlineCode",{parentName:"p"},"reg_index"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"reg_index"),": the index of the registrar whose judgement is being made. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"target"),": the account whose identity the judgement is upon. This must be an account  with a registered identity. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"judgement"),": the judgement of the registrar of index ",(0,r.kt)("inlineCode",{parentName:"p"},"reg_index")," about ",(0,r.kt)("inlineCode",{parentName:"p"},"target"),"."))),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"JudgementGiven")," if successful. "))),(0,r.kt)("h3",{id:"quitsub"},"quitSub()"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.identity.quitSub"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Remove the sender as a sub-account. "),(0,r.kt)("p",{parentName:"li"},"Payment: Balance reserved by a previous ",(0,r.kt)("inlineCode",{parentName:"p"},"set_subs")," call for one sub will be repatriated to the sender (",(0,r.kt)("em",{parentName:"p"},"not")," the original depositor). "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," and the sender must have a registered super-identity. "),(0,r.kt)("p",{parentName:"li"},"NOTE: This should not normally be used, but is provided in the case that the non- controller of an account is maliciously registered as a sub-account. "))),(0,r.kt)("h3",{id:"removesubsub-lookupsource"},"removeSub(sub: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.identity.removeSub"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Remove the given account from the sender's subs. "),(0,r.kt)("p",{parentName:"li"},"Payment: Balance reserved by a previous ",(0,r.kt)("inlineCode",{parentName:"p"},"set_subs")," call for one sub will be repatriated to the sender. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," and the sender must have a registered sub identity of ",(0,r.kt)("inlineCode",{parentName:"p"},"sub"),". "))),(0,r.kt)("h3",{id:"renamesubsub-lookupsource-data-data"},"renameSub(sub: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", data: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Data"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.identity.renameSub"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Alter the associated name of the given sub-account. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," and the sender must have a registered sub identity of ",(0,r.kt)("inlineCode",{parentName:"p"},"sub"),". "))),(0,r.kt)("h3",{id:"requestjudgementreg_index-compactregistrarindex-max_fee-compactbalanceof"},"requestJudgement(reg_index: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<RegistrarIndex>"),", max_fee: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<BalanceOf>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.identity.requestJudgement"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Request a judgement from a registrar. "),(0,r.kt)("p",{parentName:"li"},"Payment: At most ",(0,r.kt)("inlineCode",{parentName:"p"},"max_fee")," will be reserved for payment to the registrar if judgement given. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," and the sender must have a registered identity. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"reg_index"),": The index of the registrar whose judgement is requested. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"max_fee"),": The maximum fee that may be paid. This should just be auto-populated as:"))),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"nocompile Self::registrars().get(reg_index).unwrap().fee ")," "),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"JudgementRequested")," if successful. "))),(0,r.kt)("h3",{id:"setaccountidindex-compactregistrarindex-new-accountid"},"setAccountId(index: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<RegistrarIndex>"),", new: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.identity.setAccountId"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Change the account associated with a registrar. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," and the sender must be the account of the registrar whose index is ",(0,r.kt)("inlineCode",{parentName:"p"},"index"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"index"),": the index of the registrar whose fee is to be set. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"new"),": the new account ID."))))),(0,r.kt)("h3",{id:"setfeeindex-compactregistrarindex-fee-compactbalanceof"},"setFee(index: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<RegistrarIndex>"),", fee: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<BalanceOf>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.identity.setFee"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Set the fee required for a judgement to be requested from a registrar. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," and the sender must be the account of the registrar whose index is ",(0,r.kt)("inlineCode",{parentName:"p"},"index"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"index"),": the index of the registrar whose fee is to be set. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"fee"),": the new fee."))))),(0,r.kt)("h3",{id:"setfieldsindex-compactregistrarindex-fields-identityfields"},"setFields(index: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<RegistrarIndex>"),", fields: ",(0,r.kt)("inlineCode",{parentName:"h3"},"IdentityFields"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.identity.setFields"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Set the field information for a registrar. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," and the sender must be the account of the registrar whose index is ",(0,r.kt)("inlineCode",{parentName:"p"},"index"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"index"),": the index of the registrar whose fee is to be set. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"fields"),": the fields that the registrar concerns themselves with."))))),(0,r.kt)("h3",{id:"setidentityinfo-identityinfo"},"setIdentity(info: ",(0,r.kt)("inlineCode",{parentName:"h3"},"IdentityInfo"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.identity.setIdentity"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Set an account's identity information and reserve the appropriate deposit. "),(0,r.kt)("p",{parentName:"li"},"If the account already has identity information, the deposit is taken as part payment for the new deposit. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"info"),": The identity information. ")),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"IdentitySet")," if successful. "))),(0,r.kt)("h3",{id:"setsubssubs-vecaccountiddata"},"setSubs(subs: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Vec<(AccountId,Data)>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.identity.setSubs"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Set the sub-accounts of the sender. "),(0,r.kt)("p",{parentName:"li"},"Payment: Any aggregate balance reserved by previous ",(0,r.kt)("inlineCode",{parentName:"p"},"set_subs")," calls will be returned and an amount ",(0,r.kt)("inlineCode",{parentName:"p"},"SubAccountDeposit")," will be reserved for each item in ",(0,r.kt)("inlineCode",{parentName:"p"},"subs"),". "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," and the sender must have a registered identity. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"subs"),": The identity's (new) sub-accounts. ")))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"imonline"},"imOnline"),(0,r.kt)("h3",{id:"heartbeatheartbeat-heartbeat-_signature-signature"},"heartbeat(heartbeat: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Heartbeat"),", _signature: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Signature"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.tx.imOnline.heartbeat")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":    ")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"indices"},"indices"),(0,r.kt)("h3",{id:"claimindex-accountindex"},"claim(index: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountIndex"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.indices.claim"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Assign an previously unassigned index. "),(0,r.kt)("p",{parentName:"li"},"Payment: ",(0,r.kt)("inlineCode",{parentName:"p"},"Deposit")," is reserved from the sender account. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"index"),": the index to be claimed. This must not be in use. ")),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"IndexAssigned")," if successful. "))),(0,r.kt)("h3",{id:"forcetransfernew-accountid-index-accountindex-freeze-bool"},"forceTransfer(new: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),", index: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountIndex"),", freeze: ",(0,r.kt)("inlineCode",{parentName:"h3"},"bool"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.indices.forceTransfer"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Force an index to an account. This doesn't require a deposit. If the index is already held, then any deposit is reimbursed to its current owner. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Root"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"index"),": the index to be (re-)assigned. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"new"),": the new owner of the index. This function is a no-op if it is equal to sender.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"freeze"),": if set to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", will freeze the index so it cannot be transferred."))),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"IndexAssigned")," if successful. "))),(0,r.kt)("h3",{id:"freeindex-accountindex"},"free(index: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountIndex"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.indices.free"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Free up an index owned by the sender. "),(0,r.kt)("p",{parentName:"li"},"Payment: Any previous deposit placed for the index is unreserved in the sender account. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," and the sender must own the index. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"index"),": the index to be freed. This must be owned by the sender. ")),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"IndexFreed")," if successful. "))),(0,r.kt)("h3",{id:"freezeindex-accountindex"},"freeze(index: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountIndex"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.indices.freeze"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Freeze an index so it will always point to the sender account. This consumes the deposit. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," and the signing account must have a non-frozen account ",(0,r.kt)("inlineCode",{parentName:"p"},"index"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"index"),": the index to be frozen in place. ")),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"IndexFrozen")," if successful. "))),(0,r.kt)("h3",{id:"transfernew-accountid-index-accountindex"},"transfer(new: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),", index: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountIndex"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.indices.transfer"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Assign an index already owned by the sender to another account. The balance reservation is effectively transferred to the new account. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"index"),": the index to be re-assigned. This must be owned by the sender. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"new"),": the new owner of the index. This function is a no-op if it is equal to sender."))),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"IndexAssigned")," if successful. "))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"lottery"},"lottery"),(0,r.kt)("h3",{id:"buyticketcall-call"},"buyTicket(call: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Call"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.lottery.buyTicket"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Buy a ticket to enter the lottery. "),(0,r.kt)("p",{parentName:"li"},"This extrinsic acts as a passthrough function for ",(0,r.kt)("inlineCode",{parentName:"p"},"call"),". In all situations where ",(0,r.kt)("inlineCode",{parentName:"p"},"call")," alone would succeed, this extrinsic should succeed. "),(0,r.kt)("p",{parentName:"li"},"If ",(0,r.kt)("inlineCode",{parentName:"p"},"call")," is successful, then we will attempt to purchase a ticket, which may fail silently. To detect success of a ticket purchase, you should listen for the ",(0,r.kt)("inlineCode",{parentName:"p"},"TicketBought")," event. "),(0,r.kt)("p",{parentName:"li"},"This extrinsic must be called by a signed origin. "))),(0,r.kt)("h3",{id:"setcallscalls-veccall"},"setCalls(calls: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Vec<Call>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.lottery.setCalls"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Set calls in storage which can be used to purchase a lottery ticket. "),(0,r.kt)("p",{parentName:"li"},"This function only matters if you use the ",(0,r.kt)("inlineCode",{parentName:"p"},"ValidateCall")," implementation provided by this pallet, which uses storage to determine the valid calls. "),(0,r.kt)("p",{parentName:"li"},"This extrinsic must be called by the Manager origin. "))),(0,r.kt)("h3",{id:"startlotteryprice-balanceof-length-blocknumber-delay-blocknumber-repeat-bool"},"startLottery(price: ",(0,r.kt)("inlineCode",{parentName:"h3"},"BalanceOf"),", length: ",(0,r.kt)("inlineCode",{parentName:"h3"},"BlockNumber"),", delay: ",(0,r.kt)("inlineCode",{parentName:"h3"},"BlockNumber"),", repeat: ",(0,r.kt)("inlineCode",{parentName:"h3"},"bool"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.lottery.startLottery"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Start a lottery using the provided configuration. "),(0,r.kt)("p",{parentName:"li"},"This extrinsic must be called by the ",(0,r.kt)("inlineCode",{parentName:"p"},"ManagerOrigin"),". "),(0,r.kt)("p",{parentName:"li"},"Parameters: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"price"),": The cost of a single ticket. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"length"),": How long the lottery should run for starting at the current block.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"delay"),": How long after the lottery end we should wait before picking a winner.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"repeat"),": If the lottery should repeat when completed."))))),(0,r.kt)("h3",{id:"stoprepeat"},"stopRepeat()"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.lottery.stopRepeat"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   If a lottery is repeating, you can use this to stop the repeat. The lottery will continue to run to completion. "),(0,r.kt)("p",{parentName:"li"},"This extrinsic must be called by the ",(0,r.kt)("inlineCode",{parentName:"p"},"ManagerOrigin"),". "))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"multisig"},"multisig"),(0,r.kt)("h3",{id:"approveasmultithreshold-u16-other_signatories-vecaccountid-maybe_timepoint-optiontimepoint-call_hash-u832-max_weight-weight"},"approveAsMulti(threshold: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u16"),", other_signatories: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Vec<AccountId>"),", maybe_timepoint: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Option<Timepoint>"),", call_hash: ",(0,r.kt)("inlineCode",{parentName:"h3"},"[u8;32]"),", max_weight: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Weight"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.multisig.approveAsMulti"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Register approval for a dispatch to be made from a deterministic composite account if approved by a total of ",(0,r.kt)("inlineCode",{parentName:"p"},"threshold - 1")," of ",(0,r.kt)("inlineCode",{parentName:"p"},"other_signatories"),". "),(0,r.kt)("p",{parentName:"li"},"Payment: ",(0,r.kt)("inlineCode",{parentName:"p"},"DepositBase")," will be reserved if this is the first approval, plus ",(0,r.kt)("inlineCode",{parentName:"p"},"threshold")," times ",(0,r.kt)("inlineCode",{parentName:"p"},"DepositFactor"),". It is returned once this dispatch happens or is cancelled. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"threshold"),": The total number of approvals for this dispatch before it is executed. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"other_signatories"),": The accounts (other than the sender) who can approve thisdispatch. May not be empty. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"maybe_timepoint"),": If this is the first approval, then this must be ",(0,r.kt)("inlineCode",{parentName:"p"},"None"),". If it isnot the first approval, then it must be ",(0,r.kt)("inlineCode",{parentName:"p"},"Some"),", with the timepoint (block number and transaction index) of the first approval transaction. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"call_hash"),": The hash of the call to be executed."))),(0,r.kt)("p",{parentName:"li"},"NOTE: If this is the final approval, you will want to use ",(0,r.kt)("inlineCode",{parentName:"p"},"as_multi")," instead. "))),(0,r.kt)("h3",{id:"asmultithreshold-u16-other_signatories-vecaccountid-maybe_timepoint-optiontimepoint-call-opaquecall-store_call-bool-max_weight-weight"},"asMulti(threshold: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u16"),", other_signatories: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Vec<AccountId>"),", maybe_timepoint: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Option<Timepoint>"),", call: ",(0,r.kt)("inlineCode",{parentName:"h3"},"OpaqueCall"),", store_call: ",(0,r.kt)("inlineCode",{parentName:"h3"},"bool"),", max_weight: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Weight"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.multisig.asMulti"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Register approval for a dispatch to be made from a deterministic composite account if approved by a total of ",(0,r.kt)("inlineCode",{parentName:"p"},"threshold - 1")," of ",(0,r.kt)("inlineCode",{parentName:"p"},"other_signatories"),". "),(0,r.kt)("p",{parentName:"li"},"If there are enough, then dispatch the call. "),(0,r.kt)("p",{parentName:"li"},"Payment: ",(0,r.kt)("inlineCode",{parentName:"p"},"DepositBase")," will be reserved if this is the first approval, plus ",(0,r.kt)("inlineCode",{parentName:"p"},"threshold")," times ",(0,r.kt)("inlineCode",{parentName:"p"},"DepositFactor"),". It is returned once this dispatch happens or is cancelled. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"threshold"),": The total number of approvals for this dispatch before it is executed. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"other_signatories"),": The accounts (other than the sender) who can approve thisdispatch. May not be empty. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"maybe_timepoint"),": If this is the first approval, then this must be ",(0,r.kt)("inlineCode",{parentName:"p"},"None"),". If it isnot the first approval, then it must be ",(0,r.kt)("inlineCode",{parentName:"p"},"Some"),", with the timepoint (block number and transaction index) of the first approval transaction. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"call"),": The call to be executed."))),(0,r.kt)("p",{parentName:"li"},"NOTE: Unless this is the final approval, you will generally want to use ",(0,r.kt)("inlineCode",{parentName:"p"},"approve_as_multi")," instead, since it only requires a hash of the call. "),(0,r.kt)("p",{parentName:"li"},"Result is equivalent to the dispatched result if ",(0,r.kt)("inlineCode",{parentName:"p"},"threshold")," is exactly ",(0,r.kt)("inlineCode",{parentName:"p"},"1"),". Otherwise on success, result is ",(0,r.kt)("inlineCode",{parentName:"p"},"Ok")," and the result from the interior call, if it was executed, may be found in the deposited ",(0,r.kt)("inlineCode",{parentName:"p"},"MultisigExecuted")," event. "))),(0,r.kt)("h3",{id:"asmultithreshold1other_signatories-vecaccountid-call-call"},"asMultiThreshold1(other_signatories: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Vec<AccountId>"),", call: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Call"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.multisig.asMultiThreshold1"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Immediately dispatch a multi-signature call using a single approval from the caller. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"other_signatories"),": The accounts (other than the sender) who are part of the multi-signature, but do not participate in the approval process. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"call"),": The call to be executed."))),(0,r.kt)("p",{parentName:"li"},"Result is equivalent to the dispatched result. "))),(0,r.kt)("h3",{id:"cancelasmultithreshold-u16-other_signatories-vecaccountid-timepoint-timepoint-call_hash-u832"},"cancelAsMulti(threshold: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u16"),", other_signatories: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Vec<AccountId>"),", timepoint: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Timepoint"),", call_hash: ",(0,r.kt)("inlineCode",{parentName:"h3"},"[u8;32]"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.multisig.cancelAsMulti"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously for this operation will be unreserved on success. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"threshold"),": The total number of approvals for this dispatch before it is executed. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"other_signatories"),": The accounts (other than the sender) who can approve thisdispatch. May not be empty. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"timepoint"),": The timepoint (block number and transaction index) of the first approvaltransaction for this dispatch. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"call_hash"),": The hash of the call to be executed."))))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"proxy"},"proxy"),(0,r.kt)("h3",{id:"addproxydelegate-accountid-proxy_type-proxytype-delay-blocknumber"},"addProxy(delegate: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),", proxy_type: ",(0,r.kt)("inlineCode",{parentName:"h3"},"ProxyType"),", delay: ",(0,r.kt)("inlineCode",{parentName:"h3"},"BlockNumber"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.proxy.addProxy"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Register a proxy account for the sender that is able to make calls on its behalf. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". "),(0,r.kt)("p",{parentName:"li"},"Parameters: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"proxy"),": The account that the ",(0,r.kt)("inlineCode",{parentName:"p"},"caller")," would like to make a proxy.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"proxy_type"),": The permissions allowed for this proxy account.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"delay"),": The announcement period required of the initial proxy. Will generally bezero. "))))),(0,r.kt)("h3",{id:"announcereal-accountid-call_hash-callhashof"},"announce(real: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),", call_hash: ",(0,r.kt)("inlineCode",{parentName:"h3"},"CallHashOf"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.proxy.announce"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Publish the hash of a proxy-call that will be made in the future. "),(0,r.kt)("p",{parentName:"li"},"This must be called some number of blocks before the corresponding ",(0,r.kt)("inlineCode",{parentName:"p"},"proxy")," is attempted if the delay associated with the proxy relationship is greater than zero. "),(0,r.kt)("p",{parentName:"li"},"No more than ",(0,r.kt)("inlineCode",{parentName:"p"},"MaxPending")," announcements may be made at any one time. "),(0,r.kt)("p",{parentName:"li"},"This will take a deposit of ",(0,r.kt)("inlineCode",{parentName:"p"},"AnnouncementDepositFactor")," as well as ",(0,r.kt)("inlineCode",{parentName:"p"},"AnnouncementDepositBase")," if there are no other pending announcements. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," and a proxy of ",(0,r.kt)("inlineCode",{parentName:"p"},"real"),". "),(0,r.kt)("p",{parentName:"li"},"Parameters: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"real"),": The account that the proxy will make a call on behalf of.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"call_hash"),": The hash of the call to be made by the ",(0,r.kt)("inlineCode",{parentName:"p"},"real")," account."))))),(0,r.kt)("h3",{id:"anonymousproxy_type-proxytype-delay-blocknumber-index-u16"},"anonymous(proxy_type: ",(0,r.kt)("inlineCode",{parentName:"h3"},"ProxyType"),", delay: ",(0,r.kt)("inlineCode",{parentName:"h3"},"BlockNumber"),", index: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u16"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.proxy.anonymous"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and initialize it with a proxy of ",(0,r.kt)("inlineCode",{parentName:"p"},"proxy_type")," for ",(0,r.kt)("inlineCode",{parentName:"p"},"origin")," sender. "),(0,r.kt)("p",{parentName:"li"},"Requires a ",(0,r.kt)("inlineCode",{parentName:"p"},"Signed")," origin. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"proxy_type"),": The type of the proxy that the sender will be registered as over the new account. This will almost always be the most permissive ",(0,r.kt)("inlineCode",{parentName:"p"},"ProxyType")," possible to allow for maximum flexibility. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"index"),": A disambiguation index, in case this is called multiple times in the sametransaction (e.g. with ",(0,r.kt)("inlineCode",{parentName:"p"},"utility::batch"),"). Unless you're using ",(0,r.kt)("inlineCode",{parentName:"p"},"batch")," you probably just want to use ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),". ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"delay"),": The announcement period required of the initial proxy. Will generally bezero. "))),(0,r.kt)("p",{parentName:"li"},"Fails with ",(0,r.kt)("inlineCode",{parentName:"p"},"Duplicate")," if this has already been called in this transaction, from the same sender, with the same parameters. "),(0,r.kt)("p",{parentName:"li"},"Fails if there are insufficient funds to pay for deposit. "),(0,r.kt)("p",{parentName:"li"}," TODO: Might be over counting 1 read "))),(0,r.kt)("h3",{id:"killanonymousspawner-accountid-proxy_type-proxytype-index-u16-height-compactblocknumber-ext_index-compactu32"},"killAnonymous(spawner: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),", proxy_type: ",(0,r.kt)("inlineCode",{parentName:"h3"},"ProxyType"),", index: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u16"),", height: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<BlockNumber>"),", ext_index: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<u32>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.proxy.killAnonymous"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Removes a previously spawned anonymous proxy. "),(0,r.kt)("p",{parentName:"li"},"WARNING: ",(0,r.kt)("strong",{parentName:"p"},"All access to this account will be lost.")," Any funds held in it will be inaccessible. "),(0,r.kt)("p",{parentName:"li"},"Requires a ",(0,r.kt)("inlineCode",{parentName:"p"},"Signed")," origin, and the sender account must have been created by a call to ",(0,r.kt)("inlineCode",{parentName:"p"},"anonymous")," with corresponding parameters. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"spawner"),": The account that originally called ",(0,r.kt)("inlineCode",{parentName:"p"},"anonymous")," to create this account. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"index"),": The disambiguation index originally passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"anonymous"),". Probably ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"proxy_type"),": The proxy type originally passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"anonymous"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"height"),": The height of the chain when the call to ",(0,r.kt)("inlineCode",{parentName:"p"},"anonymous")," was processed.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"ext_index"),": The extrinsic index in which the call to ",(0,r.kt)("inlineCode",{parentName:"p"},"anonymous")," was processed."))),(0,r.kt)("p",{parentName:"li"},"Fails with ",(0,r.kt)("inlineCode",{parentName:"p"},"NoPermission")," in case the caller is not a previously created anonymous account whose ",(0,r.kt)("inlineCode",{parentName:"p"},"anonymous")," call has corresponding parameters. "))),(0,r.kt)("h3",{id:"proxyreal-accountid-force_proxy_type-optionproxytype-call-call"},"proxy(real: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),", force_proxy_type: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Option<ProxyType>"),", call: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Call"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.proxy.proxy"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Dispatch the given ",(0,r.kt)("inlineCode",{parentName:"p"},"call")," from an account that the sender is authorised for through ",(0,r.kt)("inlineCode",{parentName:"p"},"add_proxy"),". "),(0,r.kt)("p",{parentName:"li"},"Removes any corresponding announcement(s). "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". "),(0,r.kt)("p",{parentName:"li"},"Parameters: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"real"),": The account that the proxy will make a call on behalf of.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"force_proxy_type"),": Specify the exact proxy type to be used and checked for this call.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"call"),": The call to be made by the ",(0,r.kt)("inlineCode",{parentName:"p"},"real")," account."))))),(0,r.kt)("h3",{id:"proxyannounceddelegate-accountid-real-accountid-force_proxy_type-optionproxytype-call-call"},"proxyAnnounced(delegate: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),", real: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),", force_proxy_type: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Option<ProxyType>"),", call: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Call"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.proxy.proxyAnnounced"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Dispatch the given ",(0,r.kt)("inlineCode",{parentName:"p"},"call")," from an account that the sender is authorized for through ",(0,r.kt)("inlineCode",{parentName:"p"},"add_proxy"),". "),(0,r.kt)("p",{parentName:"li"},"Removes any corresponding announcement(s). "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". "),(0,r.kt)("p",{parentName:"li"},"Parameters: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"real"),": The account that the proxy will make a call on behalf of.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"force_proxy_type"),": Specify the exact proxy type to be used and checked for this call.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"call"),": The call to be made by the ",(0,r.kt)("inlineCode",{parentName:"p"},"real")," account."))))),(0,r.kt)("h3",{id:"rejectannouncementdelegate-accountid-call_hash-callhashof"},"rejectAnnouncement(delegate: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),", call_hash: ",(0,r.kt)("inlineCode",{parentName:"h3"},"CallHashOf"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.proxy.rejectAnnouncement"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Remove the given announcement of a delegate. "),(0,r.kt)("p",{parentName:"li"},"May be called by a target (proxied) account to remove a call that one of their delegates (",(0,r.kt)("inlineCode",{parentName:"p"},"delegate"),") has announced they want to execute. The deposit is returned. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". "),(0,r.kt)("p",{parentName:"li"},"Parameters: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"delegate"),": The account that previously announced the call.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"call_hash"),": The hash of the call to be made."))))),(0,r.kt)("h3",{id:"removeannouncementreal-accountid-call_hash-callhashof"},"removeAnnouncement(real: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),", call_hash: ",(0,r.kt)("inlineCode",{parentName:"h3"},"CallHashOf"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.proxy.removeAnnouncement"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Remove a given announcement. "),(0,r.kt)("p",{parentName:"li"},"May be called by a proxy account to remove a call they previously announced and return the deposit. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". "),(0,r.kt)("p",{parentName:"li"},"Parameters: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"real"),": The account that the proxy will make a call on behalf of.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"call_hash"),": The hash of the call to be made by the ",(0,r.kt)("inlineCode",{parentName:"p"},"real")," account."))))),(0,r.kt)("h3",{id:"removeproxies"},"removeProxies()"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.proxy.removeProxies"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Unregister all proxy accounts for the sender. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". "),(0,r.kt)("p",{parentName:"li"},"WARNING: This may be called on accounts created by ",(0,r.kt)("inlineCode",{parentName:"p"},"anonymous"),", however if done, then the unreserved fees will be inaccessible. ",(0,r.kt)("strong",{parentName:"p"},"All access to this account will be lost.")," "))),(0,r.kt)("h3",{id:"removeproxydelegate-accountid-proxy_type-proxytype-delay-blocknumber"},"removeProxy(delegate: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),", proxy_type: ",(0,r.kt)("inlineCode",{parentName:"h3"},"ProxyType"),", delay: ",(0,r.kt)("inlineCode",{parentName:"h3"},"BlockNumber"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.proxy.removeProxy"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Unregister a proxy account for the sender. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". "),(0,r.kt)("p",{parentName:"li"},"Parameters: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"proxy"),": The account that the ",(0,r.kt)("inlineCode",{parentName:"p"},"caller")," would like to remove as a proxy.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"proxy_type"),": The permissions currently enabled for the removed proxy account."))))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"recovery"},"recovery"),(0,r.kt)("h3",{id:"asrecoveredaccount-accountid-call-call"},"asRecovered(account: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),", call: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Call"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.recovery.asRecovered"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Send a call through a recovered account. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," and registered to be able to make calls on behalf of the recovered account. "),(0,r.kt)("p",{parentName:"li"},"Parameters: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"account"),": The recovered account you want to make a call on-behalf-of.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"call"),": The call you want to make with the recovered account."))))),(0,r.kt)("h3",{id:"cancelrecoveredaccount-accountid"},"cancelRecovered(account: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.recovery.cancelRecovered"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Cancel the ability to use ",(0,r.kt)("inlineCode",{parentName:"p"},"as_recovered")," for ",(0,r.kt)("inlineCode",{parentName:"p"},"account"),". "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," and registered to be able to make calls on behalf of the recovered account. "),(0,r.kt)("p",{parentName:"li"},"Parameters: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"account"),": The recovered account you are able to call on-behalf-of.")))),(0,r.kt)("h3",{id:"claimrecoveryaccount-accountid"},"claimRecovery(account: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.recovery.claimRecovery"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Allow a successful rescuer to claim their recovered account. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),' and must be a "rescuer" who has successfully completed the account recovery process: collected ',(0,r.kt)("inlineCode",{parentName:"p"},"threshold")," or more vouches, waited ",(0,r.kt)("inlineCode",{parentName:"p"},"delay_period")," blocks since initiation. "),(0,r.kt)("p",{parentName:"li"},"Parameters: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"account"),": The lost account that you want to claim has been successfully  recovered by you. ")))),(0,r.kt)("h3",{id:"closerecoveryrescuer-accountid"},"closeRecovery(rescuer: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.recovery.closeRecovery"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   As the controller of a recoverable account, close an active recovery process for your account. "),(0,r.kt)("p",{parentName:"li"},"Payment: By calling this function, the recoverable account will receive the recovery deposit ",(0,r.kt)("inlineCode",{parentName:"p"},"RecoveryDeposit")," placed by the rescuer. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," and must be a recoverable account with an active recovery process for it. "),(0,r.kt)("p",{parentName:"li"},"Parameters: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rescuer"),": The account trying to rescue this recoverable account.")))),(0,r.kt)("h3",{id:"createrecoveryfriends-vecaccountid-threshold-u16-delay_period-blocknumber"},"createRecovery(friends: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Vec<AccountId>"),", threshold: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u16"),", delay_period: ",(0,r.kt)("inlineCode",{parentName:"h3"},"BlockNumber"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.recovery.createRecovery"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Create a recovery configuration for your account. This makes your account recoverable. "),(0,r.kt)("p",{parentName:"li"},"Payment: ",(0,r.kt)("inlineCode",{parentName:"p"},"ConfigDepositBase")," + ",(0,r.kt)("inlineCode",{parentName:"p"},"FriendDepositFactor")," * #_of_friends balance will be reserved for storing the recovery configuration. This deposit is returned in full when the user calls ",(0,r.kt)("inlineCode",{parentName:"p"},"remove_recovery"),". "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". "),(0,r.kt)("p",{parentName:"li"},"Parameters: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"friends"),": A list of friends you trust to vouch for recovery attempts.  Should be ordered and contain no duplicate values. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"threshold"),": The number of friends that must vouch for a recovery attempt  before the account can be recovered. Should be less than or equal to   the length of the list of friends. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"delay_period"),": The number of blocks after a recovery attempt is initialized  that needs to pass before the account can be recovered. "))))),(0,r.kt)("h3",{id:"initiaterecoveryaccount-accountid"},"initiateRecovery(account: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.recovery.initiateRecovery"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Initiate the process for recovering a recoverable account. "),(0,r.kt)("p",{parentName:"li"},"Payment: ",(0,r.kt)("inlineCode",{parentName:"p"},"RecoveryDeposit")," balance will be reserved for initiating the recovery process. This deposit will always be repatriated to the account trying to be recovered. See ",(0,r.kt)("inlineCode",{parentName:"p"},"close_recovery"),". "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". "),(0,r.kt)("p",{parentName:"li"},"Parameters: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"account"),": The lost account that you want to recover. This account  needs to be recoverable (i.e. have a recovery configuration). ")))),(0,r.kt)("h3",{id:"removerecovery"},"removeRecovery()"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.recovery.removeRecovery"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Remove the recovery process for your account. Recovered accounts are still accessible. "),(0,r.kt)("p",{parentName:"li"},"NOTE: The user must make sure to call ",(0,r.kt)("inlineCode",{parentName:"p"},"close_recovery")," on all active recovery attempts before calling this function else it will fail. "),(0,r.kt)("p",{parentName:"li"},"Payment: By calling this function the recoverable account will unreserve their recovery configuration deposit. (",(0,r.kt)("inlineCode",{parentName:"p"},"ConfigDepositBase")," + ",(0,r.kt)("inlineCode",{parentName:"p"},"FriendDepositFactor")," * #_of_friends) "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," and must be a recoverable account (i.e. has a recovery configuration). "))),(0,r.kt)("h3",{id:"setrecoveredlost-accountid-rescuer-accountid"},"setRecovered(lost: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),", rescuer: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.recovery.setRecovered"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Allow ROOT to bypass the recovery process and set an a rescuer account for a lost account directly. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"ROOT"),". "),(0,r.kt)("p",{parentName:"li"},"Parameters: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"lost"),': The "lost account" to be recovered.')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"rescuer"),': The "rescuer account" which can call as the lost account.'))))),(0,r.kt)("h3",{id:"vouchrecoverylost-accountid-rescuer-accountid"},"vouchRecovery(lost: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),", rescuer: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.recovery.vouchRecovery"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),':   Allow a "friend" of a recoverable account to vouch for an active recovery process for that account. '),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),' and must be a "friend" for the recoverable account. '),(0,r.kt)("p",{parentName:"li"},"Parameters: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"lost"),": The lost account that you want to recover.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"rescuer"),": The account trying to rescue the lost account that you  want to vouch for. "))),(0,r.kt)("p",{parentName:"li"},"The combination of these two parameters must point to an active recovery process. "))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"scheduler"},"scheduler"),(0,r.kt)("h3",{id:"cancelwhen-blocknumber-index-u32"},"cancel(when: ",(0,r.kt)("inlineCode",{parentName:"h3"},"BlockNumber"),", index: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.tx.scheduler.cancel")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":   Cancel an anonymously scheduled task. ")),(0,r.kt)("h3",{id:"cancelnamedid-bytes"},"cancelNamed(id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Bytes"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.tx.scheduler.cancelNamed")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":   Cancel a named scheduled task. ")),(0,r.kt)("h3",{id:"schedulewhen-blocknumber-maybe_periodic-optionperiod-priority-priority-call-call"},"schedule(when: ",(0,r.kt)("inlineCode",{parentName:"h3"},"BlockNumber"),", maybe_periodic: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Option<Period>"),", priority: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Priority"),", call: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Call"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.tx.scheduler.schedule")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":   Anonymously schedule a task. ")),(0,r.kt)("h3",{id:"scheduleafterafter-blocknumber-maybe_periodic-optionperiod-priority-priority-call-call"},"scheduleAfter(after: ",(0,r.kt)("inlineCode",{parentName:"h3"},"BlockNumber"),", maybe_periodic: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Option<Period>"),", priority: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Priority"),", call: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Call"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.tx.scheduler.scheduleAfter")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":   Anonymously schedule a task after a delay. ")),(0,r.kt)("h3",{id:"schedulenamedid-bytes-when-blocknumber-maybe_periodic-optionperiod-priority-priority-call-call"},"scheduleNamed(id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Bytes"),", when: ",(0,r.kt)("inlineCode",{parentName:"h3"},"BlockNumber"),", maybe_periodic: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Option<Period>"),", priority: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Priority"),", call: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Call"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.tx.scheduler.scheduleNamed")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":   Schedule a named task. ")),(0,r.kt)("h3",{id:"schedulenamedafterid-bytes-after-blocknumber-maybe_periodic-optionperiod-priority-priority-call-call"},"scheduleNamedAfter(id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Bytes"),", after: ",(0,r.kt)("inlineCode",{parentName:"h3"},"BlockNumber"),", maybe_periodic: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Option<Period>"),", priority: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Priority"),", call: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Call"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.tx.scheduler.scheduleNamedAfter")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":   Schedule a named task after a delay. ")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"session"},"session"),(0,r.kt)("h3",{id:"purgekeys"},"purgeKeys()"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.session.purgeKeys"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Removes any session key(s) of the function caller. This doesn't take effect until the next session. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin of this function must be signed. "))),(0,r.kt)("h3",{id:"setkeyskeys-keys-proof-bytes"},"setKeys(keys: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Keys"),", proof: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Bytes"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.session.setKeys"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Sets the session key(s) of the function caller to ",(0,r.kt)("inlineCode",{parentName:"p"},"keys"),". Allows an account to set its session key prior to becoming a validator. This doesn't take effect until the next session. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin of this function must be signed. "))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"society"},"society"),(0,r.kt)("h3",{id:"bidvalue-balanceof"},"bid(value: ",(0,r.kt)("inlineCode",{parentName:"h3"},"BalanceOf"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.society.bid"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   A user outside of the society can make a bid for entry. "),(0,r.kt)("p",{parentName:"li"},"Payment: ",(0,r.kt)("inlineCode",{parentName:"p"},"CandidateDeposit")," will be reserved for making a bid. It is returned when the bid becomes a member, or if the bid calls ",(0,r.kt)("inlineCode",{parentName:"p"},"unbid"),". "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". "),(0,r.kt)("p",{parentName:"li"},"Parameters: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value"),": A one time payment the bid would like to receive when joining the society.")))),(0,r.kt)("h3",{id:"defendervoteapprove-bool"},"defenderVote(approve: ",(0,r.kt)("inlineCode",{parentName:"h3"},"bool"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.society.defenderVote"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   As a member, vote on the defender. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," and a member. "),(0,r.kt)("p",{parentName:"li"},"Parameters: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"approve"),": A boolean which says if the candidate should beapproved (",(0,r.kt)("inlineCode",{parentName:"li"},"true"),") or rejected (",(0,r.kt)("inlineCode",{parentName:"li"},"false"),"). ")))),(0,r.kt)("h3",{id:"foundfounder-accountid-max_members-u32-rules-bytes"},"found(founder: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),", max_members: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32"),", rules: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Bytes"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.society.found"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Found the society. "),(0,r.kt)("p",{parentName:"li"},"This is done as a discrete action in order to allow for the module to be included into a running chain and can only be done once. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be from the ",(0,r.kt)("em",{parentName:"p"},"FounderSetOrigin"),". "),(0,r.kt)("p",{parentName:"li"},"Parameters: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"founder")," - The first member and head of the newly founded society.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"max_members")," - The initial max number of members for the society.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"rules")," - The rules of this society concerning membership."))))),(0,r.kt)("h3",{id:"judgesuspendedcandidatewho-accountid-judgement-societyjudgement"},"judgeSuspendedCandidate(who: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),", judgement: ",(0,r.kt)("inlineCode",{parentName:"h3"},"SocietyJudgement"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.society.judgeSuspendedCandidate"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Allow suspended judgement origin to make judgement on a suspended candidate. "),(0,r.kt)("p",{parentName:"li"},"If the judgement is ",(0,r.kt)("inlineCode",{parentName:"p"},"Approve"),", we add them to society as a member with the appropriate payment for joining society. "),(0,r.kt)("p",{parentName:"li"},"If the judgement is ",(0,r.kt)("inlineCode",{parentName:"p"},"Reject"),", we either slash the deposit of the bid, giving it back to the society treasury, or we ban the voucher from vouching again. "),(0,r.kt)("p",{parentName:"li"},"If the judgement is ",(0,r.kt)("inlineCode",{parentName:"p"},"Rebid"),", we put the candidate back in the bid pool and let them go through the induction process again. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be from the ",(0,r.kt)("em",{parentName:"p"},"SuspensionJudgementOrigin"),". "),(0,r.kt)("p",{parentName:"li"},"Parameters: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"who")," - The suspended candidate to be judged.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"judgement")," - ",(0,r.kt)("inlineCode",{parentName:"p"},"Approve"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Reject"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"Rebid"),"."))))),(0,r.kt)("h3",{id:"judgesuspendedmemberwho-accountid-forgive-bool"},"judgeSuspendedMember(who: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),", forgive: ",(0,r.kt)("inlineCode",{parentName:"h3"},"bool"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.society.judgeSuspendedMember"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Allow suspension judgement origin to make judgement on a suspended member. "),(0,r.kt)("p",{parentName:"li"},"If a suspended member is forgiven, we simply add them back as a member, not affecting any of the existing storage items for that member. "),(0,r.kt)("p",{parentName:"li"},"If a suspended member is rejected, remove all associated storage items, including their payouts, and remove any vouched bids they currently have. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be from the ",(0,r.kt)("em",{parentName:"p"},"SuspensionJudgementOrigin"),". "),(0,r.kt)("p",{parentName:"li"},"Parameters: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"who")," - The suspended member to be judged.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"forgive")," - A boolean representing whether the suspension judgement origin              forgives (",(0,r.kt)("inlineCode",{parentName:"p"},"true"),") or rejects (",(0,r.kt)("inlineCode",{parentName:"p"},"false"),") a suspended member. "))))),(0,r.kt)("h3",{id:"payout"},"payout()"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.society.payout"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Transfer the first matured payout for the sender and remove it from the records. "),(0,r.kt)("p",{parentName:"li"},"NOTE: This extrinsic needs to be called multiple times to claim multiple matured payouts. "),(0,r.kt)("p",{parentName:"li"},"Payment: The member will receive a payment equal to their first matured payout to their free balance. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," and a member with payouts remaining. "))),(0,r.kt)("h3",{id:"setmaxmembersmax-u32"},"setMaxMembers(max: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.society.setMaxMembers"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Allows root origin to change the maximum number of members in society. Max membership count must be greater than 1. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be from ",(0,r.kt)("em",{parentName:"p"},"ROOT"),". "),(0,r.kt)("p",{parentName:"li"},"Parameters: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"max")," - The maximum number of members for the society.")))),(0,r.kt)("h3",{id:"unbidpos-u32"},"unbid(pos: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.society.unbid"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   A bidder can remove their bid for entry into society. By doing so, they will have their candidate deposit returned or they will unvouch their voucher. "),(0,r.kt)("p",{parentName:"li"},"Payment: The bid deposit is unreserved if the user made a bid. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," and a bidder. "),(0,r.kt)("p",{parentName:"li"},"Parameters: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pos"),": Position in the ",(0,r.kt)("inlineCode",{parentName:"li"},"Bids")," vector of the bid who wants to unbid.")))),(0,r.kt)("h3",{id:"unfound"},"unfound()"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.society.unfound"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Annul the founding of the society. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be Signed, and the signing account must be both the ",(0,r.kt)("inlineCode",{parentName:"p"},"Founder")," and the ",(0,r.kt)("inlineCode",{parentName:"p"},"Head"),". This implies that it may only be done when there is one member. "))),(0,r.kt)("h3",{id:"unvouchpos-u32"},"unvouch(pos: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.society.unvouch"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   As a vouching member, unvouch a bid. This only works while vouched user is only a bidder (and not a candidate). "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," and a vouching member. "),(0,r.kt)("p",{parentName:"li"},"Parameters: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pos"),": Position in the ",(0,r.kt)("inlineCode",{parentName:"li"},"Bids")," vector of the bid who should be unvouched.")))),(0,r.kt)("h3",{id:"votecandidate-lookupsource-approve-bool"},"vote(candidate: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", approve: ",(0,r.kt)("inlineCode",{parentName:"h3"},"bool"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.society.vote"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   As a member, vote on a candidate. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," and a member. "),(0,r.kt)("p",{parentName:"li"},"Parameters: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"candidate"),": The candidate that the member would like to bid on.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"approve"),": A boolean which says if the candidate should be             approved (",(0,r.kt)("inlineCode",{parentName:"p"},"true"),") or rejected (",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"). "))))),(0,r.kt)("h3",{id:"vouchwho-accountid-value-balanceof-tip-balanceof"},"vouch(who: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),", value: ",(0,r.kt)("inlineCode",{parentName:"h3"},"BalanceOf"),", tip: ",(0,r.kt)("inlineCode",{parentName:"h3"},"BalanceOf"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.society.vouch"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   As a member, vouch for someone to join society by placing a bid on their behalf. "),(0,r.kt)("p",{parentName:"li"},"There is no deposit required to vouch for a new bid, but a member can only vouch for one bid at a time. If the bid becomes a suspended candidate and ultimately rejected by the suspension judgement origin, the member will be banned from vouching again. "),(0,r.kt)("p",{parentName:"li"},"As a vouching member, you can claim a tip if the candidate is accepted. This tip will be paid as a portion of the reward the member will receive for joining the society. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," and a member. "),(0,r.kt)("p",{parentName:"li"},"Parameters: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"who"),": The user who you would like to vouch for.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"value"),": The total reward to be paid between you and the candidate if they becomea member in the society. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"tip"),": Your cut of the total ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," payout when the candidate is inducted intothe society. Tips larger than ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," will be saturated upon payout. "))))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"staking"},"staking"),(0,r.kt)("h3",{id:"bondcontroller-lookupsource-value-compactbalanceof-payee-rewarddestination"},"bond(controller: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", value: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<BalanceOf>"),", payee: ",(0,r.kt)("inlineCode",{parentName:"h3"},"RewardDestination"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.staking.bond"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Take the origin account as a stash and lock up ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," of its balance. ",(0,r.kt)("inlineCode",{parentName:"p"},"controller")," will be the account that controls it. "),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"value")," must be more than the ",(0,r.kt)("inlineCode",{parentName:"p"},"minimum_balance")," specified by ",(0,r.kt)("inlineCode",{parentName:"p"},"T::Currency"),". "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," by the stash account. "),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"Bonded"),". "))),(0,r.kt)("h3",{id:"bondextramax_additional-compactbalanceof"},"bondExtra(max_additional: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<BalanceOf>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.staking.bondExtra"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Add some extra amount that have appeared in the stash ",(0,r.kt)("inlineCode",{parentName:"p"},"free_balance")," into the balance up for staking. "),(0,r.kt)("p",{parentName:"li"},"Use this if there are additional funds in your stash account that you wish to bond. Unlike ","[",(0,r.kt)("inlineCode",{parentName:"p"},"bond"),"]"," or ","[",(0,r.kt)("inlineCode",{parentName:"p"},"unbond"),"]"," this function does not impose any limitation on the amount that can be added. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," by the stash, not the controller and it can be only called when ","[",(0,r.kt)("inlineCode",{parentName:"p"},"EraElectionStatus"),"]"," is ",(0,r.kt)("inlineCode",{parentName:"p"},"Closed"),". "),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"Bonded"),". "))),(0,r.kt)("h3",{id:"canceldeferredslashera-eraindex-slash_indices-vecu32"},"cancelDeferredSlash(era: ",(0,r.kt)("inlineCode",{parentName:"h3"},"EraIndex"),", slash_indices: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Vec<u32>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.staking.cancelDeferredSlash"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Cancel enactment of a deferred slash. "),(0,r.kt)("p",{parentName:"li"},"Can be called by the ",(0,r.kt)("inlineCode",{parentName:"p"},"T::SlashCancelOrigin"),". "),(0,r.kt)("p",{parentName:"li"},"Parameters: era and indices of the slashes for that era to kill. "))),(0,r.kt)("h3",{id:"chill"},"chill()"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.staking.chill"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Declare no desire to either validate or nominate. "),(0,r.kt)("p",{parentName:"li"},"Effects will be felt at the beginning of the next era. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," by the controller, not the stash. And, it can be only called when ","[",(0,r.kt)("inlineCode",{parentName:"p"},"EraElectionStatus"),"]"," is ",(0,r.kt)("inlineCode",{parentName:"p"},"Closed"),". "))),(0,r.kt)("h3",{id:"forcenewera"},"forceNewEra()"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.staking.forceNewEra"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Force there to be a new era at the end of the next session. After this, it will be reset to normal (non-forced) behaviour. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin must be Root. "))),(0,r.kt)("h3",{id:"forceneweraalways"},"forceNewEraAlways()"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.staking.forceNewEraAlways"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Force there to be a new era at the end of sessions indefinitely. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin must be Root. "))),(0,r.kt)("h3",{id:"forcenoeras"},"forceNoEras()"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.staking.forceNoEras"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Force there to be no new eras indefinitely. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin must be Root. "))),(0,r.kt)("h3",{id:"forceunstakestash-accountid-num_slashing_spans-u32"},"forceUnstake(stash: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),", num_slashing_spans: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.staking.forceUnstake"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Force a current staker to become completely unstaked, immediately. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin must be Root. "))),(0,r.kt)("h3",{id:"increasevalidatorcountadditional-compactu32"},"increaseValidatorCount(additional: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<u32>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.staking.increaseValidatorCount"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Increments the ideal number of validators. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin must be Root. "))),(0,r.kt)("h3",{id:"kickwho-veclookupsource"},"kick(who: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Vec<LookupSource>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.staking.kick"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Remove the given nominations from the calling validator. "),(0,r.kt)("p",{parentName:"li"},"Effects will be felt at the beginning of the next era. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," by the controller, not the stash. And, it can be only called when ","[",(0,r.kt)("inlineCode",{parentName:"p"},"EraElectionStatus"),"]"," is ",(0,r.kt)("inlineCode",{parentName:"p"},"Closed"),". The controller account should represent a validator. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"who"),": A list of nominator stash accounts who are nominating this validator which   should no longer be nominating this validator. ")),(0,r.kt)("p",{parentName:"li"},"Note: Making this call only makes sense if you first set the validator preferences to block any further nominations. "))),(0,r.kt)("h3",{id:"nominatetargets-veclookupsource"},"nominate(targets: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Vec<LookupSource>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.staking.nominate"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Declare the desire to nominate ",(0,r.kt)("inlineCode",{parentName:"p"},"targets")," for the origin controller. "),(0,r.kt)("p",{parentName:"li"},"Effects will be felt at the beginning of the next era. This can only be called when ","[",(0,r.kt)("inlineCode",{parentName:"p"},"EraElectionStatus"),"]"," is ",(0,r.kt)("inlineCode",{parentName:"p"},"Closed"),". "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," by the controller, not the stash. And, it can be only called when ","[",(0,r.kt)("inlineCode",{parentName:"p"},"EraElectionStatus"),"]"," is ",(0,r.kt)("inlineCode",{parentName:"p"},"Closed"),". "))),(0,r.kt)("h3",{id:"payoutstakersvalidator_stash-accountid-era-eraindex"},"payoutStakers(validator_stash: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),", era: ",(0,r.kt)("inlineCode",{parentName:"h3"},"EraIndex"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.staking.payoutStakers"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Pay out all the stakers behind a single validator for a single era. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"validator_stash")," is the stash account of the validator. Their nominators, up to   ",(0,r.kt)("inlineCode",{parentName:"p"},"T::MaxNominatorRewardedPerValidator"),", will also receive their rewards. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"era")," may be any era between ",(0,r.kt)("inlineCode",{parentName:"p"},"[current_era - history_depth; current_era]"),"."))),(0,r.kt)("p",{parentName:"li"},"The origin of this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". Any account can call this function, even if it is not one of the stakers. "),(0,r.kt)("p",{parentName:"li"},"This can only be called when ","[",(0,r.kt)("inlineCode",{parentName:"p"},"EraElectionStatus"),"]"," is ",(0,r.kt)("inlineCode",{parentName:"p"},"Closed"),". "))),(0,r.kt)("h3",{id:"reapstashstash-accountid-num_slashing_spans-u32"},"reapStash(stash: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),", num_slashing_spans: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.staking.reapStash"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Remove all data structure concerning a staker/stash once its balance is at the minimum. This is essentially equivalent to ",(0,r.kt)("inlineCode",{parentName:"p"},"withdraw_unbonded")," except it can be called by anyone and the target ",(0,r.kt)("inlineCode",{parentName:"p"},"stash")," must have no funds left beyond the ED. "),(0,r.kt)("p",{parentName:"li"},"This can be called from any origin. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"stash"),": The stash account to reap. Its balance must be zero. ")))),(0,r.kt)("h3",{id:"rebondvalue-compactbalanceof"},"rebond(value: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<BalanceOf>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.staking.rebond"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Rebond a portion of the stash scheduled to be unlocked. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin must be signed by the controller, and it can be only called when ","[",(0,r.kt)("inlineCode",{parentName:"p"},"EraElectionStatus"),"]"," is ",(0,r.kt)("inlineCode",{parentName:"p"},"Closed"),". "))),(0,r.kt)("h3",{id:"scalevalidatorcountfactor-percent"},"scaleValidatorCount(factor: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Percent"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.staking.scaleValidatorCount"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Scale up the ideal number of validators by a factor. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin must be Root. "))),(0,r.kt)("h3",{id:"setcontrollercontroller-lookupsource"},"setController(controller: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.staking.setController"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   (Re-)set the controller of a stash. "),(0,r.kt)("p",{parentName:"li"},"Effects will be felt at the beginning of the next era. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," by the stash, not the controller. "))),(0,r.kt)("h3",{id:"sethistorydepthnew_history_depth-compacteraindex-_era_items_deleted-compactu32"},"setHistoryDepth(new_history_depth: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<EraIndex>"),", _era_items_deleted: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<u32>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.staking.setHistoryDepth"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Set ",(0,r.kt)("inlineCode",{parentName:"p"},"HistoryDepth")," value. This function will delete any history information when ",(0,r.kt)("inlineCode",{parentName:"p"},"HistoryDepth")," is reduced. "),(0,r.kt)("p",{parentName:"li"},"Parameters: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"new_history_depth"),": The new history depth you would like to set.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"era_items_deleted"),": The number of items that will be deleted by this dispatch.   This should report all the storage items that will be deleted by clearing old    era history. Needed to report an accurate weight for the dispatch. Trusted by    ",(0,r.kt)("inlineCode",{parentName:"p"},"Root")," to report an accurate number. "))),(0,r.kt)("p",{parentName:"li"},"Origin must be root. "))),(0,r.kt)("h3",{id:"setinvulnerablesinvulnerables-vecaccountid"},"setInvulnerables(invulnerables: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Vec<AccountId>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.staking.setInvulnerables"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Set the validators who cannot be slashed (if any). "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin must be Root. "))),(0,r.kt)("h3",{id:"setpayeepayee-rewarddestination"},"setPayee(payee: ",(0,r.kt)("inlineCode",{parentName:"h3"},"RewardDestination"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.staking.setPayee"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   (Re-)set the payment target for a controller. "),(0,r.kt)("p",{parentName:"li"},"Effects will be felt at the beginning of the next era. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," by the controller, not the stash. "))),(0,r.kt)("h3",{id:"setvalidatorcountnew-compactu32"},"setValidatorCount(new: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<u32>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.staking.setValidatorCount"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Sets the ideal number of validators. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin must be Root. "))),(0,r.kt)("h3",{id:"unbondvalue-compactbalanceof"},"unbond(value: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<BalanceOf>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.staking.unbond"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Schedule a portion of the stash to be unlocked ready for transfer out after the bond period ends. If this leaves an amount actively bonded less than T::Currency::minimum_balance(), then it is increased to the full amount. "),(0,r.kt)("p",{parentName:"li"},"Once the unlock period is done, you can call ",(0,r.kt)("inlineCode",{parentName:"p"},"withdraw_unbonded")," to actually move the funds out of management ready for transfer. "),(0,r.kt)("p",{parentName:"li"},"No more than a limited number of unlocking chunks (see ",(0,r.kt)("inlineCode",{parentName:"p"},"MAX_UNLOCKING_CHUNKS"),") can co-exists at the same time. In that case, ","[",(0,r.kt)("inlineCode",{parentName:"p"},"Call::withdraw_unbonded"),"]"," need to be called first to remove some of the chunks (if possible). "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," by the controller, not the stash. And, it can be only called when ","[",(0,r.kt)("inlineCode",{parentName:"p"},"EraElectionStatus"),"]"," is ",(0,r.kt)("inlineCode",{parentName:"p"},"Closed"),". "),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"Unbonded"),". "),(0,r.kt)("p",{parentName:"li"},"See also ","[",(0,r.kt)("inlineCode",{parentName:"p"},"Call::withdraw_unbonded"),"]",". "))),(0,r.kt)("h3",{id:"validateprefs-validatorprefs"},"validate(prefs: ",(0,r.kt)("inlineCode",{parentName:"h3"},"ValidatorPrefs"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.staking.validate"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Declare the desire to validate for the origin controller. "),(0,r.kt)("p",{parentName:"li"},"Effects will be felt at the beginning of the next era. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," by the controller, not the stash. And, it can be only called when ","[",(0,r.kt)("inlineCode",{parentName:"p"},"EraElectionStatus"),"]"," is ",(0,r.kt)("inlineCode",{parentName:"p"},"Closed"),". "))),(0,r.kt)("h3",{id:"withdrawunbondednum_slashing_spans-u32"},"withdrawUnbonded(num_slashing_spans: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.staking.withdrawUnbonded"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Remove any unlocked chunks from the ",(0,r.kt)("inlineCode",{parentName:"p"},"unlocking")," queue from our management. "),(0,r.kt)("p",{parentName:"li"},"This essentially frees up that balance to be used by the stash account to do whatever it wants. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," by the controller, not the stash. And, it can be only called when ","[",(0,r.kt)("inlineCode",{parentName:"p"},"EraElectionStatus"),"]"," is ",(0,r.kt)("inlineCode",{parentName:"p"},"Closed"),". "),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"Withdrawn"),". "),(0,r.kt)("p",{parentName:"li"},"See also ","[",(0,r.kt)("inlineCode",{parentName:"p"},"Call::unbond"),"]",". "))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"sudo"},"sudo"),(0,r.kt)("h3",{id:"setkeynew-lookupsource"},"setKey(new: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.sudo.setKey"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Authenticates the current sudo key and sets the given AccountId (",(0,r.kt)("inlineCode",{parentName:"p"},"new"),") as the new sudo key. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". "))),(0,r.kt)("h3",{id:"sudocall-call"},"sudo(call: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Call"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.sudo.sudo"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Authenticates the sudo key and dispatches a function call with ",(0,r.kt)("inlineCode",{parentName:"p"},"Root")," origin. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". "))),(0,r.kt)("h3",{id:"sudoaswho-lookupsource-call-call"},"sudoAs(who: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", call: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Call"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.sudo.sudoAs"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Authenticates the sudo key and dispatches a function call with ",(0,r.kt)("inlineCode",{parentName:"p"},"Signed")," origin from a given account. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". "))),(0,r.kt)("h3",{id:"sudouncheckedweightcall-call-_weight-weight"},"sudoUncheckedWeight(call: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Call"),", _weight: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Weight"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.sudo.sudoUncheckedWeight"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Authenticates the sudo key and dispatches a function call with ",(0,r.kt)("inlineCode",{parentName:"p"},"Root")," origin. This function does not check the weight of the call, and instead allows the Sudo user to specify the weight of the call. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". "))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"system"},"system"),(0,r.kt)("h3",{id:"fillblock_ratio-perbill"},"fillBlock(_ratio: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Perbill"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.tx.system.fillBlock")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":   A dispatch that will fill the block weight up to the given ratio. ")),(0,r.kt)("h3",{id:"killprefixprefix-key-_subkeys-u32"},"killPrefix(prefix: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Key"),", _subkeys: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u32"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.system.killPrefix"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Kill all storage items with a key that starts with the given prefix. "),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"NOTE:")," We rely on the Root origin to provide us the number of subkeys under the prefix we are removing to accurately calculate the weight of this function. "))),(0,r.kt)("h3",{id:"killstoragekeys-veckey"},"killStorage(keys: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Vec<Key>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.tx.system.killStorage")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":   Kill some items from storage. ")),(0,r.kt)("h3",{id:"remark_remark-bytes"},"remark(_remark: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Bytes"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.tx.system.remark")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":   Make some on-chain remark. ")),(0,r.kt)("h3",{id:"remarkwitheventremark-bytes"},"remarkWithEvent(remark: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Bytes"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.tx.system.remarkWithEvent")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":   Make some on-chain remark and emit event. ")),(0,r.kt)("h3",{id:"setchangestrieconfigchanges_trie_config-optionchangestrieconfiguration"},"setChangesTrieConfig(changes_trie_config: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Option<ChangesTrieConfiguration>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.tx.system.setChangesTrieConfig")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":   Set the new changes trie configuration. ")),(0,r.kt)("h3",{id:"setcodecode-bytes"},"setCode(code: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Bytes"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.tx.system.setCode")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":   Set the new runtime code. ")),(0,r.kt)("h3",{id:"setcodewithoutcheckscode-bytes"},"setCodeWithoutChecks(code: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Bytes"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.tx.system.setCodeWithoutChecks")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":   Set the new runtime code without doing any checks of the given ",(0,r.kt)("inlineCode",{parentName:"li"},"code"),". ")),(0,r.kt)("h3",{id:"setheappagespages-u64"},"setHeapPages(pages: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u64"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.tx.system.setHeapPages")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":   Set the number of pages in the WebAssembly environment's heap. ")),(0,r.kt)("h3",{id:"setstorageitems-veckeyvalue"},"setStorage(items: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Vec<KeyValue>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.tx.system.setStorage")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":   Set some items of storage. ")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"technicalcommittee"},"technicalCommittee"),(0,r.kt)("h3",{id:"closeproposal_hash-hash-index-compactproposalindex-proposal_weight_bound-compactweight-length_bound-compactu32-1"},"close(proposal_hash: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Hash"),", index: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<ProposalIndex>"),", proposal_weight_bound: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<Weight>"),", length_bound: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<u32>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.technicalCommittee.close"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Close a vote that is either approved, disapproved or whose voting period has ended. "),(0,r.kt)("p",{parentName:"li"},"May be called by any signed account in order to finish voting and close the proposal. "),(0,r.kt)("p",{parentName:"li"},"If called before the end of the voting period it will only close the vote if it is has enough votes to be approved or disapproved. "),(0,r.kt)("p",{parentName:"li"},"If called after the end of the voting period abstentions are counted as rejections unless there is a prime member set and the prime member cast an approval. "),(0,r.kt)("p",{parentName:"li"},"If the close operation completes successfully with disapproval, the transaction fee will be waived. Otherwise execution of the approved operation will be charged to the caller. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"proposal_weight_bound"),": The maximum amount of weight consumed by executing the closed proposal. + ",(0,r.kt)("inlineCode",{parentName:"li"},"length_bound"),": The upper bound for the length of the proposal in storage. Checked via                   ",(0,r.kt)("inlineCode",{parentName:"li"},"storage::read")," so it is ",(0,r.kt)("inlineCode",{parentName:"li"},"size_of::<u32>() == 4")," larger than the pure length. ")))),(0,r.kt)("h3",{id:"disapproveproposalproposal_hash-hash-1"},"disapproveProposal(proposal_hash: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Hash"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.technicalCommittee.disapproveProposal"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Disapprove a proposal, close, and remove it from the system, regardless of its current state. "),(0,r.kt)("p",{parentName:"li"},"Must be called by the Root origin. "),(0,r.kt)("p",{parentName:"li"},"Parameters: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"proposal_hash"),": The hash of the proposal that should be disapproved.")))),(0,r.kt)("h3",{id:"executeproposal-proposal-length_bound-compactu32-1"},"execute(proposal: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Proposal"),", length_bound: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<u32>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.technicalCommittee.execute"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Dispatch a proposal from a member using the ",(0,r.kt)("inlineCode",{parentName:"p"},"Member")," origin. "),(0,r.kt)("p",{parentName:"li"},"Origin must be a member of the collective. "))),(0,r.kt)("h3",{id:"proposethreshold-compactmembercount-proposal-proposal-length_bound-compactu32-1"},"propose(threshold: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<MemberCount>"),", proposal: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Proposal"),", length_bound: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<u32>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.technicalCommittee.propose"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Add a new proposal to either be voted on or executed directly. "),(0,r.kt)("p",{parentName:"li"},"Requires the sender to be member. "),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"threshold")," determines whether ",(0,r.kt)("inlineCode",{parentName:"p"},"proposal")," is executed directly (",(0,r.kt)("inlineCode",{parentName:"p"},"threshold < 2"),") or put up for voting. "))),(0,r.kt)("h3",{id:"setmembersnew_members-vecaccountid-prime-optionaccountid-old_count-membercount-1"},"setMembers(new_members: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Vec<AccountId>"),", prime: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Option<AccountId>"),", old_count: ",(0,r.kt)("inlineCode",{parentName:"h3"},"MemberCount"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.technicalCommittee.setMembers"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Set the collective's membership. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"new_members"),": The new member list. Be nice to the chain and provide it sorted. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"prime"),": The prime member whose vote sets the default.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"old_count"),": The upper bound for the previous number of members in storage.               Used for weight estimation. "))),(0,r.kt)("p",{parentName:"li"},"Requires root origin. "),(0,r.kt)("p",{parentName:"li"},"NOTE: Does not enforce the expected ",(0,r.kt)("inlineCode",{parentName:"p"},"MaxMembers")," limit on the amount of members, but       the weight estimations rely on it to estimate dispatchable weight. "))),(0,r.kt)("h3",{id:"voteproposal-hash-index-compactproposalindex-approve-bool-1"},"vote(proposal: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Hash"),", index: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<ProposalIndex>"),", approve: ",(0,r.kt)("inlineCode",{parentName:"h3"},"bool"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.technicalCommittee.vote"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Add an aye or nay vote for the sender to the given proposal. "),(0,r.kt)("p",{parentName:"li"},"Requires the sender to be a member. "),(0,r.kt)("p",{parentName:"li"},"Transaction fees will be waived if the member is voting on any particular proposal for the first time and the call is successful. Subsequent vote changes will charge a fee.  "))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"technicalmembership"},"technicalMembership"),(0,r.kt)("h3",{id:"addmemberwho-accountid"},"addMember(who: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.technicalMembership.addMember"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Add a member ",(0,r.kt)("inlineCode",{parentName:"p"},"who")," to the set. "),(0,r.kt)("p",{parentName:"li"},"May only be called from ",(0,r.kt)("inlineCode",{parentName:"p"},"T::AddOrigin"),". "))),(0,r.kt)("h3",{id:"changekeynew-accountid"},"changeKey(new: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.technicalMembership.changeKey"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Swap out the sending member for some other key ",(0,r.kt)("inlineCode",{parentName:"p"},"new"),". "),(0,r.kt)("p",{parentName:"li"},"May only be called from ",(0,r.kt)("inlineCode",{parentName:"p"},"Signed")," origin of a current member. "),(0,r.kt)("p",{parentName:"li"},"Prime membership is passed from the origin account to ",(0,r.kt)("inlineCode",{parentName:"p"},"new"),", if extant. "))),(0,r.kt)("h3",{id:"clearprime"},"clearPrime()"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.technicalMembership.clearPrime"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Remove the prime member if it exists. "),(0,r.kt)("p",{parentName:"li"},"May only be called from ",(0,r.kt)("inlineCode",{parentName:"p"},"T::PrimeOrigin"),". "))),(0,r.kt)("h3",{id:"removememberwho-accountid"},"removeMember(who: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.technicalMembership.removeMember"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Remove a member ",(0,r.kt)("inlineCode",{parentName:"p"},"who")," from the set. "),(0,r.kt)("p",{parentName:"li"},"May only be called from ",(0,r.kt)("inlineCode",{parentName:"p"},"T::RemoveOrigin"),". "))),(0,r.kt)("h3",{id:"resetmembersmembers-vecaccountid"},"resetMembers(members: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Vec<AccountId>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.technicalMembership.resetMembers"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Change the membership to a new set, disregarding the existing membership. Be nice and pass ",(0,r.kt)("inlineCode",{parentName:"p"},"members")," pre-sorted. "),(0,r.kt)("p",{parentName:"li"},"May only be called from ",(0,r.kt)("inlineCode",{parentName:"p"},"T::ResetOrigin"),". "))),(0,r.kt)("h3",{id:"setprimewho-accountid"},"setPrime(who: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.technicalMembership.setPrime"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Set the prime member. Must be a current member. "),(0,r.kt)("p",{parentName:"li"},"May only be called from ",(0,r.kt)("inlineCode",{parentName:"p"},"T::PrimeOrigin"),". "))),(0,r.kt)("h3",{id:"swapmemberremove-accountid-add-accountid"},"swapMember(remove: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),", add: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.technicalMembership.swapMember"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Swap out one member ",(0,r.kt)("inlineCode",{parentName:"p"},"remove")," for another ",(0,r.kt)("inlineCode",{parentName:"p"},"add"),". "),(0,r.kt)("p",{parentName:"li"},"May only be called from ",(0,r.kt)("inlineCode",{parentName:"p"},"T::SwapOrigin"),". "),(0,r.kt)("p",{parentName:"li"},"Prime membership is ",(0,r.kt)("em",{parentName:"p"},"not")," passed from ",(0,r.kt)("inlineCode",{parentName:"p"},"remove")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"add"),", if extant. "))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"timestamp"},"timestamp"),(0,r.kt)("h3",{id:"setnow-compactmoment"},"set(now: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<Moment>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.timestamp.set"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Set the current time. "),(0,r.kt)("p",{parentName:"li"},"This call should be invoked exactly once per block. It will panic at the finalization phase, if this call hasn't been invoked by that time. "),(0,r.kt)("p",{parentName:"li"},"The timestamp should be greater than the previous one by the amount specified by ",(0,r.kt)("inlineCode",{parentName:"p"},"MinimumPeriod"),". "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("inlineCode",{parentName:"p"},"Inherent"),". "))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"tips"},"tips"),(0,r.kt)("h3",{id:"closetiphash-hash"},"closeTip(hash: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Hash"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.tips.closeTip"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Close and payout a tip. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". "),(0,r.kt)("p",{parentName:"li"},"The tip identified by ",(0,r.kt)("inlineCode",{parentName:"p"},"hash")," must have finished its countdown period. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hash"),": The identity of the open tip for which a tip value is declared. This is formed   as the hash of the tuple of the original tip ",(0,r.kt)("inlineCode",{parentName:"li"},"reason")," and the beneficiary account ID. ")))),(0,r.kt)("h3",{id:"reportawesomereason-bytes-who-accountid"},"reportAwesome(reason: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Bytes"),", who: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.tips.reportAwesome"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Report something ",(0,r.kt)("inlineCode",{parentName:"p"},"reason")," that deserves a tip and claim any eventual the finder's fee. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". "),(0,r.kt)("p",{parentName:"li"},"Payment: ",(0,r.kt)("inlineCode",{parentName:"p"},"TipReportDepositBase")," will be reserved from the origin account, as well as ",(0,r.kt)("inlineCode",{parentName:"p"},"DataDepositPerByte")," for each byte in ",(0,r.kt)("inlineCode",{parentName:"p"},"reason"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"reason"),": The reason for, or the thing that deserves, the tip; generally this will be   a UTF-8-encoded URL. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"who"),": The account which should be credited for the tip."))),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"NewTip")," if successful. "))),(0,r.kt)("h3",{id:"retracttiphash-hash"},"retractTip(hash: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Hash"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.tips.retractTip"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Retract a prior tip-report from ",(0,r.kt)("inlineCode",{parentName:"p"},"report_awesome"),", and cancel the process of tipping. "),(0,r.kt)("p",{parentName:"li"},"If successful, the original deposit will be unreserved. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," and the tip identified by ",(0,r.kt)("inlineCode",{parentName:"p"},"hash")," must have been reported by the signing account through ",(0,r.kt)("inlineCode",{parentName:"p"},"report_awesome")," (and not through ",(0,r.kt)("inlineCode",{parentName:"p"},"tip_new"),"). "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hash"),": The identity of the open tip for which a tip value is declared. This is formed   as the hash of the tuple of the original tip ",(0,r.kt)("inlineCode",{parentName:"li"},"reason")," and the beneficiary account ID. ")),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"TipRetracted")," if successful. "))),(0,r.kt)("h3",{id:"slashtiphash-hash"},"slashTip(hash: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Hash"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.tips.slashTip"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Remove and slash an already-open tip. "),(0,r.kt)("p",{parentName:"li"},"May only be called from ",(0,r.kt)("inlineCode",{parentName:"p"},"T::RejectOrigin"),". "),(0,r.kt)("p",{parentName:"li"},"As a result, the finder is slashed and the deposits are lost. "),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"TipSlashed")," if successful. "))),(0,r.kt)("h3",{id:"tiphash-hash-tip_value-compactbalanceof"},"tip(hash: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Hash"),", tip_value: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<BalanceOf>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.tips.tip"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Declare a tip value for an already-open tip. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," and the signing account must be a member of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Tippers")," set. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"hash"),": The identity of the open tip for which a tip value is declared. This is formed   as the hash of the tuple of the hash of the original tip ",(0,r.kt)("inlineCode",{parentName:"p"},"reason")," and the beneficiary   account ID. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"tip_value"),": The amount of tip that the sender would like to give. The median tip  value of active tippers will be given to the ",(0,r.kt)("inlineCode",{parentName:"p"},"who"),". "))),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"TipClosing")," if the threshold of tippers has been reached and the countdown period has started. "))),(0,r.kt)("h3",{id:"tipnewreason-bytes-who-accountid-tip_value-compactbalanceof"},"tipNew(reason: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Bytes"),", who: ",(0,r.kt)("inlineCode",{parentName:"h3"},"AccountId"),", tip_value: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<BalanceOf>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.tips.tipNew"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Give a tip for something new; no finder's fee will be taken. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," and the signing account must be a member of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Tippers")," set. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"reason"),": The reason for, or the thing that deserves, the tip; generally this will be   a UTF-8-encoded URL. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"who"),": The account which should be credited for the tip.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"tip_value"),": The amount of tip that the sender would like to give. The median tip  value of active tippers will be given to the ",(0,r.kt)("inlineCode",{parentName:"p"},"who"),". "))),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"NewTip")," if successful. "))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"treasury"},"treasury"),(0,r.kt)("h3",{id:"approveproposalproposal_id-compactproposalindex"},"approveProposal(proposal_id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<ProposalIndex>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.treasury.approveProposal"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Approve a proposal. At a later time, the proposal will be allocated to the beneficiary and the original deposit will be returned. "),(0,r.kt)("p",{parentName:"li"},"May only be called from ",(0,r.kt)("inlineCode",{parentName:"p"},"T::ApproveOrigin"),". "))),(0,r.kt)("h3",{id:"proposespendvalue-compactbalanceof-beneficiary-lookupsource"},"proposeSpend(value: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<BalanceOf>"),", beneficiary: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"api.tx.treasury.proposeSpend")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"summary"),":   Put forward a suggestion for spending. A deposit proportional to the value is reserved and slashed if the proposal is rejected. It is returned once the proposal is awarded. ")),(0,r.kt)("h3",{id:"rejectproposalproposal_id-compactproposalindex"},"rejectProposal(proposal_id: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Compact<ProposalIndex>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.treasury.rejectProposal"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Reject a proposed spend. The original deposit will be slashed. "),(0,r.kt)("p",{parentName:"li"},"May only be called from ",(0,r.kt)("inlineCode",{parentName:"p"},"T::RejectOrigin"),". "))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"utility"},"utility"),(0,r.kt)("h3",{id:"asderivativeindex-u16-call-call"},"asDerivative(index: ",(0,r.kt)("inlineCode",{parentName:"h3"},"u16"),", call: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Call"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.utility.asDerivative"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Send a call through an indexed pseudonym of the sender. "),(0,r.kt)("p",{parentName:"li"},"Filter from origin are passed along. The call will be dispatched with an origin which use the same filter as the origin of this call. "),(0,r.kt)("p",{parentName:"li"},"NOTE: If you need to ensure that any account-based filtering is not honored (i.e. because you expect ",(0,r.kt)("inlineCode",{parentName:"p"},"proxy")," to have been used prior in the call stack and you do not want the call restrictions to apply to any sub-accounts), then use ",(0,r.kt)("inlineCode",{parentName:"p"},"as_multi_threshold_1")," in the Multisig pallet instead. "),(0,r.kt)("p",{parentName:"li"},"NOTE: Prior to version *12, this was called ",(0,r.kt)("inlineCode",{parentName:"p"},"as_limited_sub"),". "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". "))),(0,r.kt)("h3",{id:"batchcalls-veccall"},"batch(calls: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Vec<Call>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.utility.batch"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Send a batch of dispatch calls. "),(0,r.kt)("p",{parentName:"li"},"May be called from any origin. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"calls"),": The calls to be dispatched from the same origin. ")),(0,r.kt)("p",{parentName:"li"},"If origin is root then call are dispatch without checking origin filter. (This includes bypassing ",(0,r.kt)("inlineCode",{parentName:"p"},"frame_system::Config::BaseCallFilter"),"). "))),(0,r.kt)("p",null,"  This will return ",(0,r.kt)("inlineCode",{parentName:"p"},"Ok")," in all circumstances. To determine the success of the batch, an event is deposited. If a call failed and the batch was interrupted, then the ",(0,r.kt)("inlineCode",{parentName:"p"},"BatchInterrupted")," event is deposited, along with the number of successful calls made and the error of the failed call. If all were successful, then the ",(0,r.kt)("inlineCode",{parentName:"p"},"BatchCompleted")," event is deposited. "),(0,r.kt)("h3",{id:"batchallcalls-veccall"},"batchAll(calls: ",(0,r.kt)("inlineCode",{parentName:"h3"},"Vec<Call>"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.utility.batchAll"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Send a batch of dispatch calls and atomically execute them. The whole transaction will rollback and fail if any of the calls failed. "),(0,r.kt)("p",{parentName:"li"},"May be called from any origin. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"calls"),": The calls to be dispatched from the same origin. ")),(0,r.kt)("p",{parentName:"li"},"If origin is root then call are dispatch without checking origin filter. (This includes bypassing ",(0,r.kt)("inlineCode",{parentName:"p"},"frame_system::Config::BaseCallFilter"),"). "))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"vesting"},"vesting"),(0,r.kt)("h3",{id:"forcevestedtransfersource-lookupsource-target-lookupsource-schedule-vestinginfo"},"forceVestedTransfer(source: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", target: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", schedule: ",(0,r.kt)("inlineCode",{parentName:"h3"},"VestingInfo"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.vesting.forceVestedTransfer"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Force a vested transfer. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Root"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"source"),": The account whose funds should be transferred. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"target"),": The account that should be transferred the vested funds.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"amount"),": The amount of funds to transfer and will be vested.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"schedule"),": The vesting schedule attached to the transfer."))),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"VestingCreated"),". "))),(0,r.kt)("h3",{id:"vest"},"vest()"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.vesting.vest"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Unlock any vested funds of the sender account. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed")," and the sender must have funds still locked under this pallet. "),(0,r.kt)("p",{parentName:"li"},"Emits either ",(0,r.kt)("inlineCode",{parentName:"p"},"VestingCompleted")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"VestingUpdated"),". "))),(0,r.kt)("h3",{id:"vestothertarget-lookupsource"},"vestOther(target: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.vesting.vestOther"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Unlock any vested funds of a ",(0,r.kt)("inlineCode",{parentName:"p"},"target")," account. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"target"),": The account whose vested funds should be unlocked. Must have funds still locked under this pallet. ")),(0,r.kt)("p",{parentName:"li"},"Emits either ",(0,r.kt)("inlineCode",{parentName:"p"},"VestingCompleted")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"VestingUpdated"),". "))),(0,r.kt)("h3",{id:"vestedtransfertarget-lookupsource-schedule-vestinginfo"},"vestedTransfer(target: ",(0,r.kt)("inlineCode",{parentName:"h3"},"LookupSource"),", schedule: ",(0,r.kt)("inlineCode",{parentName:"h3"},"VestingInfo"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"interface"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"api.tx.vesting.vestedTransfer"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"summary"),":   Create a vested transfer. "),(0,r.kt)("p",{parentName:"li"},"The dispatch origin for this call must be ",(0,r.kt)("em",{parentName:"p"},"Signed"),". "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"target"),": The account that should be transferred the vested funds. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"amount"),": The amount of funds to transfer and will be vested.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"schedule"),": The vesting schedule attached to the transfer."))),(0,r.kt)("p",{parentName:"li"},"Emits ",(0,r.kt)("inlineCode",{parentName:"p"},"VestingCreated"),"."))))}s.isMDXComponent=!0}}]);