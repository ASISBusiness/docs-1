(self.webpackChunkpolkadot_js=self.webpackChunkpolkadot_js||[]).push([[5745],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return p},kt:function(){return d}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(r),d=a,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||o;return r?n.createElement(f,i(i({ref:t},p),{},{components:r})):n.createElement(f,i({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9924:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return i},metadata:function(){return s},toc:function(){return c},default:function(){return p}});var n=r(2122),a=r(9756),o=(r(7294),r(3905)),i={title:"Read storage"},s={unversionedId:"api/examples/promise/read-storage",id:"api/examples/promise/read-storage",isDocsHomePage:!1,title:"Read storage",description:"Many important variables are available through the storage API. This example shows how to call a few of those APIs.",source:"@site/docs/api/examples/promise/read-storage.md",sourceDirName:"api/examples/promise",slug:"/api/examples/promise/read-storage",permalink:"/docs/api/examples/promise/read-storage",editUrl:"https://github.com/polkadot-js/docs/edit/master/docs/api/examples/promise/read-storage.md",version:"current",frontMatter:{title:"Read storage"},sidebar:"reference",previous:{title:"Unsubscribe from listening to updates",permalink:"/docs/api/examples/promise/unsubscribe"},next:{title:"Read storage, at a specific blockhash",permalink:"/docs/api/examples/promise/read-storage-at"}},c=[],l={toc:c};function p(e){var t=e.components,r=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Many important variables are available through the storage API. This example shows how to call a few of those APIs."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// Import the API\nconst { ApiPromise } = require('@polkadot/api');\n\n// Our address for Alice on the dev chain\nconst ALICE = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY';\n\nasync function main () {\n  // Create our API with a default connection to the local node\n  const api = await ApiPromise.create();\n\n  // Make our basic chain state/storage queries, all in one go\n  const [{ nonce: accountNonce }, now, validators] = await Promise.all([\n    api.query.system.account(ALICE),\n    api.query.timestamp.now(),\n    api.query.session.validators()\n  ]);\n\n  console.log(`accountNonce(${ALICE}) ${accountNonce}`);\n  console.log(`last block timestamp ${now.toNumber()}`);\n\n  if (validators && validators.length > 0) {\n    // Retrieve the balances for all validators\n    const validatorBalances = await Promise.all(\n      validators.map((authorityId) =>\n        api.query.system.account(authorityId)\n      )\n    );\n\n    // Print out the authorityIds and balances of all validators\n    console.log('validators', validators.map((authorityId, index) => ({\n      address: authorityId.toString(),\n      balance: validatorBalances[index].data.free.toHuman(),\n      nonce: validatorBalances[index].nonce.toHuman()\n    })));\n  }\n}\n\nmain().catch(console.error).finally(() => process.exit());\n")))}p.isMDXComponent=!0}}]);