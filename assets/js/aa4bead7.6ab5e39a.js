(self.webpackChunkpolkadot_js=self.webpackChunkpolkadot_js||[]).push([[6246],{1272:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return c},toc:function(){return s},default:function(){return p}});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),o={title:"Blueprint"},c={unversionedId:"api-contract/start/blueprint",id:"api-contract/start/blueprint",isDocsHomePage:!1,title:"Blueprint",description:"A BlueprintPromise wraps an existing codeHash and an Abi and provides the opportunity to create contracts on-chain. It is either created via new BlueprintPromise from an existing codeHash, or as seen in the code example from deploying a WASM code bundle on-chain.",source:"@site/docs/api-contract/start/blueprint.md",sourceDirName:"api-contract/start",slug:"/api-contract/start/blueprint",permalink:"/docs/api-contract/start/blueprint",editUrl:"https://github.com/polkadot-js/docs/edit/master/docs/api-contract/start/blueprint.md",version:"current",frontMatter:{title:"Blueprint"},sidebar:"reference",previous:{title:"Code",permalink:"/docs/api-contract/start/code"},next:{title:"Contract",permalink:"/docs/api-contract/start/contract.read"}},s=[{value:"Create a contract",id:"create-a-contract",children:[]},{value:"Interact with contracts",id:"interact-with-contracts",children:[]}],l={toc:s};function p(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"BlueprintPromise")," wraps an existing ",(0,i.kt)("inlineCode",{parentName:"p"},"codeHash")," and an ",(0,i.kt)("inlineCode",{parentName:"p"},"Abi")," and provides the opportunity to create contracts on-chain. It is either created via ",(0,i.kt)("inlineCode",{parentName:"p"},"new BlueprintPromise")," from an existing ",(0,i.kt)("inlineCode",{parentName:"p"},"codeHash"),", or as seen in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/api-contract/start/code"},"code example")," from deploying a WASM code bundle on-chain."),(0,i.kt)("p",null,"Assuming that we did not deploy code, we can start by creating one (if following from the previous section, this is for information only, since you already have access to the created Blueprint from ",(0,i.kt)("inlineCode",{parentName:"p"},"CodePromise"),") -"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"import { BlueprintPromise } from '@polkadot/api-contract';\n\n...\n// Create a new blueprint from an existing hash. As per the code example\n// the abi is an Abi object, an unparsed JSON string or the raw JSON data\n// (after doing a JSON.parse). The hash here is either a Hash, Uint8Array\n// or hex string\nconst blueprint = new BlueprintPromise(api, abi, codeHash);\n\n// Deploy a contract using the Blueprint\n...\n")),(0,i.kt)("p",null,"As with the ",(0,i.kt)("inlineCode",{parentName:"p"},"CodePromise")," sample, we require an ",(0,i.kt)("inlineCode",{parentName:"p"},"ApiPromise"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Abi")," and the actual ",(0,i.kt)("inlineCode",{parentName:"p"},"codeHash"),", as found on-chain. If a non-existent ",(0,i.kt)("inlineCode",{parentName:"p"},"codeHash")," is used, it will fail on actual contract creation, which is the next step."),(0,i.kt)("h2",{id:"create-a-contract"},"Create a contract"),(0,i.kt)("p",null,"We either have a ",(0,i.kt)("inlineCode",{parentName:"p"},"Blueprint")," from a code deploy of a manual create. From here we can create an actual contract instance. For this example, we are assuming a normal ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/tree/master/examples/incrementer"},"incrementer contract")," to allow us have a known example to show the actual use -"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// Deploy a contract using the Blueprint\nconst endowment = 1230000000000n;\n\n// NOTE The apps UI specifies these in Mgas\nconst gasLimit = 100000n * 1000000n;\nconst initValue = 123;\n\nlet contract;\n\n// We pass the constructor (named `new` in the actual Abi),\n// the endowment, gasLimit (weight) as well as any constructor params\n// (in this case `new (initValue: i32)` is the constructor)\nconst unsub = await blueprint.tx\n  .new(endowment, gasLimit, initValue)\n  .signAndSend(alicePair, (result) => {\n    if (result.status.isInBlock || result.status.isFinalized) {\n      // here we have an additional field in the result, containing the contract\n      contract = result.contract;\n      unsub();\n    }\n  });\n")),(0,i.kt)("p",null,"As per the ",(0,i.kt)("inlineCode",{parentName:"p"},"Code")," examples previously, the ",(0,i.kt)("inlineCode",{parentName:"p"},"tx.<constructorName>")," interface is a normal submittable extrinsic with the result containing an actual ",(0,i.kt)("inlineCode",{parentName:"p"},"ContractPromise")," instance as created with the address from the events from deployment. Internally it will use the ",(0,i.kt)("inlineCode",{parentName:"p"},"instantiate")," extrinsic and interpret the events retrieved."),(0,i.kt)("p",null,"For cases where we want to refer to the message via index (or actual Abi message), we can use the ",(0,i.kt)("inlineCode",{parentName:"p"},".createContract")," helper on the ",(0,i.kt)("inlineCode",{parentName:"p"},"Blueprint"),", in this case the lower-level code would yield -"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// We pass the constructor (name, index or actual constructor from Abi),\n// the endowment, gasLimit (weight) as well as any constructor params\n// (in this case `new (initValue: i32)` is the constructor)\nconst unsub = await blueprint\n  .createContract('new', endowment, gasLimit, initValue)\n  .signAndSend(alicePair, (result) => {\n    ...\n  });\n")),(0,i.kt)("h2",{id:"interact-with-contracts"},"Interact with contracts"),(0,i.kt)("p",null,"We have made it this far. At this point you should be familiar with code deployments as well as contract instantiation, next up ",(0,i.kt)("a",{parentName:"p",href:"/docs/api-contract/start/contract.read"},"we will read a contract"),"."))}p.isMDXComponent=!0},3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);